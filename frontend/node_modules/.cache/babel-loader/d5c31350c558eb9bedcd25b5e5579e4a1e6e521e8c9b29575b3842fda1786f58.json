{"ast":null,"code":"import axios from 'axios';\n// Configuração base do Axios\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para tratamento de erros\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    // Erro com resposta do servidor\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Erro no servidor';\n    throw new Error(message);\n  } else if (error.request) {\n    // Erro de rede\n    throw new Error('Erro de conexão. Verifique sua internet.');\n  } else {\n    // Outros erros\n    throw new Error('Erro inesperado.');\n  }\n});\n\n// Serviços de Assets\nexport const assetService = {\n  // Obter informações de um ativo\n  async getAssetInfo(symbol) {\n    const response = await api.get(`/assets/info/${symbol}`);\n    const backendData = response.data.data;\n\n    // Mapear dados do backend para o formato esperado pelo frontend\n    const mappedData = {\n      symbol: backendData.symbol,\n      name: backendData.name,\n      price: backendData.current_price || 0,\n      change: backendData.change || 0,\n      changePercent: backendData.change_percent || 0,\n      volume: backendData.volume,\n      marketCap: backendData.market_cap,\n      peRatio: backendData.pe_ratio,\n      dividendYield: backendData.dividend_yield,\n      fiftyTwoWeekHigh: backendData.fifty_two_week_high || 0,\n      fiftyTwoWeekLow: backendData.fifty_two_week_low || 0,\n      currency: backendData.currency || 'USD',\n      exchange: backendData.exchange || '',\n      sector: backendData.sector,\n      industry: backendData.industry,\n      description: backendData.description,\n      website: backendData.website,\n      employees: backendData.employees,\n      founded: backendData.founded,\n      headquarters: backendData.headquarters\n    };\n    return mappedData;\n  },\n  // Obter dados históricos\n  async getHistoricalData(symbol, period = '1y', interval = '1d') {\n    const response = await api.get(`/assets/historical/${symbol}?period=${period}&interval=${interval}`);\n    return response.data.data;\n  },\n  // Buscar ativos\n  async searchAssets(query, limit = 10) {\n    const response = await api.get(`/assets/search?query=${encodeURIComponent(query)}&limit=${limit}`);\n    return response.data.data;\n  },\n  // Obter visão geral do mercado\n  async getMarketOverview() {\n    const response = await api.get('/assets/market-overview');\n    return response.data.data;\n  },\n  // Obter múltiplos ativos\n  async getMultipleAssets(symbols) {\n    const symbolsParam = symbols.join(',');\n    const response = await api.get(`/assets/multiple?symbols=${symbolsParam}`);\n    return response.data.data;\n  },\n  // Obter cotação rápida\n  async getQuickQuote(symbol) {\n    const response = await api.get(`/assets/${symbol}/quote`);\n    return response.data.data;\n  },\n  // Obter ativos em alta\n  async getTrendingAssets(limit = 10) {\n    const response = await api.get(`/assets/trending?limit=${limit}`);\n    return response.data.data;\n  },\n  // Obter performance por setor\n  async getSectorPerformance() {\n    const response = await api.get('/assets/sectors');\n    return response.data.data;\n  }\n};\n\n// Serviços de Portfolio\nexport const portfolioService = {\n  // Criar portfolio\n  async createPortfolio(data) {\n    const response = await api.post('/portfolio', data);\n    return response.data.data;\n  },\n  // Obter todos os portfolios\n  async getPortfolios() {\n    const response = await api.get('/portfolio');\n    return response.data.data;\n  },\n  // Obter portfolio específico\n  async getPortfolio(id) {\n    const response = await api.get(`/portfolio/${id}`);\n    return response.data.data;\n  },\n  // Atualizar portfolio\n  async updatePortfolio(id, data) {\n    const response = await api.put(`/portfolio/${id}`, data);\n    return response.data.data;\n  },\n  // Deletar portfolio\n  async deletePortfolio(id) {\n    await api.delete(`/portfolio/${id}`);\n  },\n  // Adicionar ativo ao portfolio\n  async addAssetToPortfolio(portfolioId, data) {\n    // Converter camelCase para snake_case para o backend\n    const backendData = {\n      symbol: data.symbol,\n      quantity: data.quantity,\n      average_price: data.averagePrice\n    };\n    const response = await api.post(`/portfolio/${portfolioId}/assets`, backendData);\n    return response.data.data;\n  },\n  // Obter ativos do portfolio\n  async getPortfolioAssets(portfolioId) {\n    try {\n      console.log(`Fetching portfolio assets for ID: ${portfolioId}`);\n      const response = await api.get(`/portfolio/${portfolioId}/assets`);\n      console.log('Portfolio assets response:', response.data);\n\n      // Mapear dados do backend (snake_case) para frontend (camelCase)\n      const mappedAssets = response.data.data.map(asset => ({\n        id: asset.id,\n        portfolioId: asset.portfolio_id,\n        symbol: asset.symbol,\n        quantity: asset.quantity,\n        averagePrice: asset.average_price,\n        currentPrice: asset.current_price,\n        totalValue: asset.total_value,\n        gain: asset.profit_loss,\n        gainPercent: asset.profit_loss_percent,\n        createdAt: asset.created_at,\n        updatedAt: asset.updated_at\n      }));\n      return mappedAssets;\n    } catch (error) {\n      console.error('Error fetching portfolio assets:', error);\n      throw error;\n    }\n  },\n  // Atualizar ativo do portfolio\n  async updatePortfolioAsset(assetId, data) {\n    const response = await api.put(`/portfolio/assets/${assetId}`, data);\n    return response.data.data;\n  },\n  // Remover ativo do portfolio\n  async removeAssetFromPortfolio(assetId) {\n    await api.delete(`/portfolio/assets/${assetId}`);\n  },\n  // Obter performance do portfolio\n  async getPortfolioPerformance(portfolioId) {\n    try {\n      console.log(`Fetching portfolio performance for ID: ${portfolioId}`);\n      const response = await api.get(`/portfolio/${portfolioId}/performance`);\n      console.log('Portfolio performance response:', response.data);\n\n      // Mapear dados do backend (snake_case) para frontend (camelCase)\n      const backendData = response.data.data;\n      const mappedData = {\n        totalValue: backendData.total_value || 0,\n        totalInvested: backendData.total_cost || 0,\n        totalGain: backendData.total_gain_loss || 0,\n        totalGainPercent: backendData.total_gain_loss_percent || 0,\n        dayGain: backendData.day_gain || 0,\n        dayGainPercent: backendData.day_gain_percent || 0,\n        assetsPerformance: (backendData.assets_performance || []).map(asset => ({\n          symbol: asset.symbol,\n          quantity: asset.quantity,\n          averagePrice: asset.average_price,\n          currentPrice: asset.current_price,\n          currentValue: asset.current_value,\n          gain: asset.gain_loss,\n          gainPercent: asset.gain_loss_percent,\n          dayGain: asset.day_gain || 0,\n          dayGainPercent: asset.day_gain_percent || 0,\n          weight: asset.weight || 0\n        }))\n      };\n      return mappedData;\n    } catch (error) {\n      console.error('Error fetching portfolio performance:', error);\n      throw error;\n    }\n  },\n  // Obter resumo do portfolio\n  async getPortfolioSummary(portfolioId) {\n    const response = await api.get(`/portfolio/${portfolioId}/summary`);\n    return response.data.data;\n  },\n  // Obter alocação do portfolio\n  async getPortfolioAllocation(portfolioId) {\n    const response = await api.get(`/portfolio/${portfolioId}/allocation`);\n    return response.data.data;\n  },\n  // Sugerir rebalanceamento\n  async suggestRebalance(portfolioId, targetAllocation) {\n    const response = await api.post(`/portfolio/${portfolioId}/rebalance`, targetAllocation);\n    return response.data.data;\n  }\n};\n\n// Função para mapear dados de notícias do backend para o formato do frontend\nconst mapNewsItem = backendNews => {\n  var _backendNews$id;\n  return {\n    id: ((_backendNews$id = backendNews.id) === null || _backendNews$id === void 0 ? void 0 : _backendNews$id.toString()) || Math.random().toString(),\n    title: backendNews.title || 'Título não disponível',\n    description: backendNews.description || '',\n    url: backendNews.url || '#',\n    source: backendNews.source || 'Fonte desconhecida',\n    publishedDate: backendNews.published_at || backendNews.publishedDate || new Date().toISOString(),\n    imageUrl: backendNews.image_url || backendNews.imageUrl,\n    category: backendNews.category,\n    sentiment: backendNews.sentiment,\n    relevanceScore: backendNews.relevance_score || backendNews.relevanceScore\n  };\n};\n\n// Serviços de Notícias\nexport const newsService = {\n  // Obter notícias financeiras\n  async getFinancialNews(limit = 20, category) {\n    let url = `/news?limit=${limit}`;\n    if (category && category !== 'all') {\n      url += `&category=${category}`;\n    }\n    const response = await api.get(url);\n    return response.data.data.map(mapNewsItem);\n  },\n  // Obter notícias de um ativo específico\n  async getAssetNews(symbol, limit = 10) {\n    const response = await api.get(`/news/asset/${symbol}?limit=${limit}`);\n    return response.data.data.map(mapNewsItem);\n  },\n  // Obter categorias de notícias\n  async getNewsCategories() {\n    const response = await api.get('/news/categories');\n    return response.data.data;\n  },\n  // Obter notícias em alta\n  async getTrendingNews(limit = 10) {\n    const response = await api.get(`/news/trending?limit=${limit}`);\n    return response.data.data.map(mapNewsItem);\n  },\n  // Buscar notícias\n  async searchNews(query, limit = 15) {\n    const response = await api.get(`/news/search?query=${encodeURIComponent(query)}&limit=${limit}`);\n    return response.data.data.map(mapNewsItem);\n  },\n  // Obter fontes de notícias\n  async getNewsSources() {\n    const response = await api.get('/news/sources');\n    return response.data.data;\n  },\n  // Obter resumo de notícias\n  async getNewsSummary() {\n    const response = await api.get('/news/summary');\n    return response.data.data;\n  },\n  // Obter manchetes\n  async getHeadlines(limit = 5) {\n    const response = await api.get(`/news/headlines?limit=${limit}`);\n    return response.data.data.map(mapNewsItem);\n  }\n};\n\n// Serviços de Calendário Econômico\n// Função para mapear dados do backend para o formato do frontend\nconst mapEconomicEvent = backendEvent => {\n  var _backendEvent$id, _backendEvent$importa;\n  // Extrair data e hora do campo datetime se disponível\n  let date = backendEvent.date;\n  let time = backendEvent.time;\n  if (backendEvent.datetime && !date) {\n    const datetime = new Date(backendEvent.datetime);\n    date = datetime.toISOString().split('T')[0]; // YYYY-MM-DD\n    time = datetime.toTimeString().slice(0, 5); // HH:MM\n  }\n  return {\n    id: ((_backendEvent$id = backendEvent.id) === null || _backendEvent$id === void 0 ? void 0 : _backendEvent$id.toString()) || Math.random().toString(),\n    title: backendEvent.title || backendEvent.event || 'Evento Econômico',\n    description: backendEvent.description || '',\n    date: date || new Date().toISOString().split('T')[0],\n    time: time,\n    country: backendEvent.country || 'US',\n    importance: ((_backendEvent$importa = backendEvent.importance) === null || _backendEvent$importa === void 0 ? void 0 : _backendEvent$importa.toLowerCase()) || 'medium',\n    category: backendEvent.category || 'Economic',\n    actual: backendEvent.actual,\n    forecast: backendEvent.forecast,\n    previous: backendEvent.previous,\n    currency: backendEvent.currency,\n    impact: backendEvent.impact\n  };\n};\nexport const calendarService = {\n  // Obter eventos econômicos\n  async getEconomicEvents(filters = {}) {\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) {\n        params.append(key, value.toString());\n      }\n    });\n    const response = await api.get(`/calendar/events?${params.toString()}`);\n    return response.data.data.map(mapEconomicEvent);\n  },\n  // Obter eventos de hoje\n  async getTodayEvents(filters = {}) {\n    let url = '/calendar/today';\n    const params = new URLSearchParams();\n    if (filters.country) params.append('country', filters.country);\n    if (filters.importance) params.append('importance', filters.importance);\n    if (filters.category) params.append('category', filters.category);\n    if (params.toString()) {\n      url += `?${params.toString()}`;\n    }\n    const response = await api.get(url);\n    return response.data.data.map(mapEconomicEvent);\n  },\n  // Obter eventos da semana\n  async getThisWeekEvents(filters = {}) {\n    let url = '/calendar/week';\n    const params = new URLSearchParams();\n    if (filters.country) params.append('country', filters.country);\n    if (filters.importance) params.append('importance', filters.importance);\n    if (filters.category) params.append('category', filters.category);\n    if (params.toString()) {\n      url += `?${params.toString()}`;\n    }\n    const response = await api.get(url);\n    return response.data.data.map(mapEconomicEvent);\n  },\n  // Obter próximos eventos\n  async getUpcomingEvents(days = 7, filters = {}) {\n    const params = new URLSearchParams();\n    params.append('days', days.toString());\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) {\n        params.append(key, value.toString());\n      }\n    });\n    const response = await api.get(`/calendar/upcoming?${params.toString()}`);\n    return response.data.data.map(mapEconomicEvent);\n  },\n  // Obter países disponíveis\n  async getAvailableCountries() {\n    const response = await api.get('/calendar/countries');\n    return response.data.data;\n  },\n  // Obter categorias de eventos\n  async getEventCategories() {\n    const response = await api.get('/calendar/categories');\n    return response.data.data;\n  },\n  // Obter níveis de importância\n  async getImportanceLevels() {\n    const response = await api.get('/calendar/importance-levels');\n    return response.data.data;\n  },\n  // Obter resumo do calendário\n  async getCalendarSummary() {\n    const response = await api.get('/calendar/summary');\n    return response.data.data;\n  },\n  // Obter eventos por data específica\n  async getEventsByDate(date, filters = {}) {\n    let url = `/calendar/events`;\n    const params = new URLSearchParams();\n    params.append('date', date);\n    if (filters.country) params.append('country', filters.country);\n    if (filters.importance) params.append('importance', filters.importance);\n    if (filters.category) params.append('category', filters.category);\n    if (params.toString()) {\n      url += `?${params.toString()}`;\n    }\n    const response = await api.get(url);\n    return response.data.data.map(mapEconomicEvent);\n  },\n  // Buscar eventos\n  async searchEvents(query, limit = 20) {\n    const response = await api.get(`/calendar/search?query=${encodeURIComponent(query)}&limit=${limit}`);\n    return response.data.data.map(mapEconomicEvent);\n  }\n};\n\n// Exportar instância do axios para uso direto se necessário\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","response","use","error","console","_error$response$data","_error$response$data2","message","data","detail","Error","request","assetService","getAssetInfo","symbol","get","backendData","mappedData","name","price","current_price","change","changePercent","change_percent","volume","marketCap","market_cap","peRatio","pe_ratio","dividendYield","dividend_yield","fiftyTwoWeekHigh","fifty_two_week_high","fiftyTwoWeekLow","fifty_two_week_low","currency","exchange","sector","industry","description","website","employees","founded","headquarters","getHistoricalData","period","interval","searchAssets","query","limit","encodeURIComponent","getMarketOverview","getMultipleAssets","symbols","symbolsParam","join","getQuickQuote","getTrendingAssets","getSectorPerformance","portfolioService","createPortfolio","post","getPortfolios","getPortfolio","id","updatePortfolio","put","deletePortfolio","delete","addAssetToPortfolio","portfolioId","quantity","average_price","averagePrice","getPortfolioAssets","log","mappedAssets","map","asset","portfolio_id","currentPrice","totalValue","total_value","gain","profit_loss","gainPercent","profit_loss_percent","createdAt","created_at","updatedAt","updated_at","updatePortfolioAsset","assetId","removeAssetFromPortfolio","getPortfolioPerformance","totalInvested","total_cost","totalGain","total_gain_loss","totalGainPercent","total_gain_loss_percent","dayGain","day_gain","dayGainPercent","day_gain_percent","assetsPerformance","assets_performance","currentValue","current_value","gain_loss","gain_loss_percent","weight","getPortfolioSummary","getPortfolioAllocation","suggestRebalance","targetAllocation","mapNewsItem","backendNews","_backendNews$id","toString","Math","random","title","url","source","publishedDate","published_at","Date","toISOString","imageUrl","image_url","category","sentiment","relevanceScore","relevance_score","newsService","getFinancialNews","getAssetNews","getNewsCategories","getTrendingNews","searchNews","getNewsSources","getNewsSummary","getHeadlines","mapEconomicEvent","backendEvent","_backendEvent$id","_backendEvent$importa","date","time","datetime","split","toTimeString","slice","event","country","importance","toLowerCase","actual","forecast","previous","impact","calendarService","getEconomicEvents","filters","params","URLSearchParams","Object","entries","forEach","key","value","append","getTodayEvents","getThisWeekEvents","getUpcomingEvents","days","getAvailableCountries","getEventCategories","getImportanceLevels","getCalendarSummary","getEventsByDate","searchEvents"],"sources":["C:/Users/ferna/INVEST_TRACKER/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport {\r\n  AssetInfo,\r\n  HistoricalData,\r\n  Portfolio,\r\n  PortfolioCreate,\r\n  PortfolioUpdate,\r\n  PortfolioAsset,\r\n  PortfolioAssetCreate,\r\n  PortfolioAssetUpdate,\r\n  NewsItem,\r\n  EconomicEvent,\r\n  ApiResponse,\r\n  MarketOverview,\r\n  AssetSearchResult,\r\n  QuickQuote,\r\n  SectorPerformance,\r\n  PortfolioPerformance,\r\n  PortfolioAllocation,\r\n  RebalanceSuggestion,\r\n  NewsFilter,\r\n  CalendarFilter\r\n} from '../types';\r\n\r\n// Configuração base do Axios\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para tratamento de erros\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    \r\n    if (error.response) {\r\n      // Erro com resposta do servidor\r\n      const message = error.response.data?.detail || error.response.data?.message || 'Erro no servidor';\r\n      throw new Error(message);\r\n    } else if (error.request) {\r\n      // Erro de rede\r\n      throw new Error('Erro de conexão. Verifique sua internet.');\r\n    } else {\r\n      // Outros erros\r\n      throw new Error('Erro inesperado.');\r\n    }\r\n  }\r\n);\r\n\r\n// Serviços de Assets\r\nexport const assetService = {\r\n  // Obter informações de um ativo\r\n  async getAssetInfo(symbol: string): Promise<AssetInfo> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get(`/assets/info/${symbol}`);\r\n    const backendData = response.data.data;\r\n    \r\n    // Mapear dados do backend para o formato esperado pelo frontend\r\n    const mappedData: AssetInfo = {\r\n      symbol: backendData.symbol,\r\n      name: backendData.name,\r\n      price: backendData.current_price || 0,\r\n      change: backendData.change || 0,\r\n      changePercent: backendData.change_percent || 0,\r\n      volume: backendData.volume,\r\n      marketCap: backendData.market_cap,\r\n      peRatio: backendData.pe_ratio,\r\n      dividendYield: backendData.dividend_yield,\r\n      fiftyTwoWeekHigh: backendData.fifty_two_week_high || 0,\r\n      fiftyTwoWeekLow: backendData.fifty_two_week_low || 0,\r\n      currency: backendData.currency || 'USD',\r\n      exchange: backendData.exchange || '',\r\n      sector: backendData.sector,\r\n      industry: backendData.industry,\r\n      description: backendData.description,\r\n      website: backendData.website,\r\n      employees: backendData.employees,\r\n      founded: backendData.founded,\r\n      headquarters: backendData.headquarters\r\n    };\r\n    \r\n    return mappedData;\r\n  },\r\n\r\n  // Obter dados históricos\r\n  async getHistoricalData(\r\n    symbol: string,\r\n    period: string = '1y',\r\n    interval: string = '1d'\r\n  ): Promise<HistoricalData[]> {\r\n    const response: AxiosResponse<ApiResponse<HistoricalData[]>> = await api.get(\r\n      `/assets/historical/${symbol}?period=${period}&interval=${interval}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Buscar ativos\r\n  async searchAssets(query: string, limit: number = 10): Promise<AssetSearchResult[]> {\r\n    const response: AxiosResponse<ApiResponse<AssetSearchResult[]>> = await api.get(\r\n      `/assets/search?query=${encodeURIComponent(query)}&limit=${limit}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter visão geral do mercado\r\n  async getMarketOverview(): Promise<MarketOverview> {\r\n    const response: AxiosResponse<ApiResponse<MarketOverview>> = await api.get('/assets/market-overview');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter múltiplos ativos\r\n  async getMultipleAssets(symbols: string[]): Promise<AssetInfo[]> {\r\n    const symbolsParam = symbols.join(',');\r\n    const response: AxiosResponse<ApiResponse<AssetInfo[]>> = await api.get(\r\n      `/assets/multiple?symbols=${symbolsParam}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter cotação rápida\r\n  async getQuickQuote(symbol: string): Promise<QuickQuote> {\r\n    const response: AxiosResponse<ApiResponse<QuickQuote>> = await api.get(`/assets/${symbol}/quote`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter ativos em alta\r\n  async getTrendingAssets(limit: number = 10): Promise<AssetInfo[]> {\r\n    const response: AxiosResponse<ApiResponse<AssetInfo[]>> = await api.get(\r\n      `/assets/trending?limit=${limit}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter performance por setor\r\n  async getSectorPerformance(): Promise<SectorPerformance[]> {\r\n    const response: AxiosResponse<ApiResponse<SectorPerformance[]>> = await api.get('/assets/sectors');\r\n    return response.data.data;\r\n  },\r\n};\r\n\r\n// Serviços de Portfolio\r\nexport const portfolioService = {\r\n  // Criar portfolio\r\n  async createPortfolio(data: PortfolioCreate): Promise<Portfolio> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio>> = await api.post('/portfolio', data);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter todos os portfolios\r\n  async getPortfolios(): Promise<Portfolio[]> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio[]>> = await api.get('/portfolio');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter portfolio específico\r\n  async getPortfolio(id: number): Promise<Portfolio> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio>> = await api.get(`/portfolio/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Atualizar portfolio\r\n  async updatePortfolio(id: number, data: PortfolioUpdate): Promise<Portfolio> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio>> = await api.put(`/portfolio/${id}`, data);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Deletar portfolio\r\n  async deletePortfolio(id: number): Promise<void> {\r\n    await api.delete(`/portfolio/${id}`);\r\n  },\r\n\r\n  // Adicionar ativo ao portfolio\r\n  async addAssetToPortfolio(portfolioId: number, data: PortfolioAssetCreate): Promise<PortfolioAsset> {\r\n    // Converter camelCase para snake_case para o backend\r\n    const backendData = {\r\n      symbol: data.symbol,\r\n      quantity: data.quantity,\r\n      average_price: data.averagePrice\r\n    };\r\n    \r\n    const response: AxiosResponse<ApiResponse<PortfolioAsset>> = await api.post(\r\n      `/portfolio/${portfolioId}/assets`,\r\n      backendData\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter ativos do portfolio\r\n  async getPortfolioAssets(portfolioId: number): Promise<PortfolioAsset[]> {\r\n    try {\r\n      console.log(`Fetching portfolio assets for ID: ${portfolioId}`);\r\n      const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n        `/portfolio/${portfolioId}/assets`\r\n      );\r\n      console.log('Portfolio assets response:', response.data);\r\n      \r\n      // Mapear dados do backend (snake_case) para frontend (camelCase)\r\n      const mappedAssets = response.data.data.map((asset: any) => ({\r\n        id: asset.id,\r\n        portfolioId: asset.portfolio_id,\r\n        symbol: asset.symbol,\r\n        quantity: asset.quantity,\r\n        averagePrice: asset.average_price,\r\n        currentPrice: asset.current_price,\r\n        totalValue: asset.total_value,\r\n        gain: asset.profit_loss,\r\n        gainPercent: asset.profit_loss_percent,\r\n        createdAt: asset.created_at,\r\n        updatedAt: asset.updated_at\r\n      }));\r\n      \r\n      return mappedAssets;\r\n    } catch (error) {\r\n      console.error('Error fetching portfolio assets:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Atualizar ativo do portfolio\r\n  async updatePortfolioAsset(assetId: number, data: PortfolioAssetUpdate): Promise<PortfolioAsset> {\r\n    const response: AxiosResponse<ApiResponse<PortfolioAsset>> = await api.put(\r\n      `/portfolio/assets/${assetId}`,\r\n      data\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Remover ativo do portfolio\r\n  async removeAssetFromPortfolio(assetId: number): Promise<void> {\r\n    await api.delete(`/portfolio/assets/${assetId}`);\r\n  },\r\n\r\n  // Obter performance do portfolio\r\n  async getPortfolioPerformance(portfolioId: number): Promise<PortfolioPerformance> {\r\n    try {\r\n      console.log(`Fetching portfolio performance for ID: ${portfolioId}`);\r\n      const response: AxiosResponse<ApiResponse<any>> = await api.get(\r\n        `/portfolio/${portfolioId}/performance`\r\n      );\r\n      console.log('Portfolio performance response:', response.data);\r\n      \r\n      // Mapear dados do backend (snake_case) para frontend (camelCase)\r\n      const backendData = response.data.data;\r\n      const mappedData: PortfolioPerformance = {\r\n        totalValue: backendData.total_value || 0,\r\n        totalInvested: backendData.total_cost || 0,\r\n        totalGain: backendData.total_gain_loss || 0,\r\n        totalGainPercent: backendData.total_gain_loss_percent || 0,\r\n        dayGain: backendData.day_gain || 0,\r\n        dayGainPercent: backendData.day_gain_percent || 0,\r\n        assetsPerformance: (backendData.assets_performance || []).map((asset: any) => ({\r\n          symbol: asset.symbol,\r\n          quantity: asset.quantity,\r\n          averagePrice: asset.average_price,\r\n          currentPrice: asset.current_price,\r\n          currentValue: asset.current_value,\r\n          gain: asset.gain_loss,\r\n          gainPercent: asset.gain_loss_percent,\r\n          dayGain: asset.day_gain || 0,\r\n          dayGainPercent: asset.day_gain_percent || 0,\r\n          weight: asset.weight || 0\r\n        }))\r\n      };\r\n      \r\n      return mappedData;\r\n    } catch (error) {\r\n      console.error('Error fetching portfolio performance:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obter resumo do portfolio\r\n  async getPortfolioSummary(portfolioId: number): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get(`/portfolio/${portfolioId}/summary`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter alocação do portfolio\r\n  async getPortfolioAllocation(portfolioId: number): Promise<PortfolioAllocation[]> {\r\n    const response: AxiosResponse<ApiResponse<PortfolioAllocation[]>> = await api.get(\r\n      `/portfolio/${portfolioId}/allocation`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Sugerir rebalanceamento\r\n  async suggestRebalance(\r\n    portfolioId: number,\r\n    targetAllocation: Record<string, number>\r\n  ): Promise<RebalanceSuggestion[]> {\r\n    const response: AxiosResponse<ApiResponse<RebalanceSuggestion[]>> = await api.post(\r\n      `/portfolio/${portfolioId}/rebalance`,\r\n      targetAllocation\r\n    );\r\n    return response.data.data;\r\n  },\r\n};\r\n\r\n// Função para mapear dados de notícias do backend para o formato do frontend\r\nconst mapNewsItem = (backendNews: any): NewsItem => {\r\n  return {\r\n    id: backendNews.id?.toString() || Math.random().toString(),\r\n    title: backendNews.title || 'Título não disponível',\r\n    description: backendNews.description || '',\r\n    url: backendNews.url || '#',\r\n    source: backendNews.source || 'Fonte desconhecida',\r\n    publishedDate: backendNews.published_at || backendNews.publishedDate || new Date().toISOString(),\r\n    imageUrl: backendNews.image_url || backendNews.imageUrl,\r\n    category: backendNews.category,\r\n    sentiment: backendNews.sentiment as 'positive' | 'negative' | 'neutral' | undefined,\r\n    relevanceScore: backendNews.relevance_score || backendNews.relevanceScore\r\n  };\r\n};\r\n\r\n// Serviços de Notícias\r\nexport const newsService = {\r\n  // Obter notícias financeiras\r\n  async getFinancialNews(limit: number = 20, category?: string): Promise<NewsItem[]> {\r\n    let url = `/news?limit=${limit}`;\r\n    if (category && category !== 'all') {\r\n      url += `&category=${category}`;\r\n    }\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(url);\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n\r\n  // Obter notícias de um ativo específico\r\n  async getAssetNews(symbol: string, limit: number = 10): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/news/asset/${symbol}?limit=${limit}`\r\n    );\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n\r\n  // Obter categorias de notícias\r\n  async getNewsCategories(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/news/categories');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter notícias em alta\r\n  async getTrendingNews(limit: number = 10): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(`/news/trending?limit=${limit}`);\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n\r\n  // Buscar notícias\r\n  async searchNews(query: string, limit: number = 15): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/news/search?query=${encodeURIComponent(query)}&limit=${limit}`\r\n    );\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n\r\n  // Obter fontes de notícias\r\n  async getNewsSources(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/news/sources');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter resumo de notícias\r\n  async getNewsSummary(): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get('/news/summary');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter manchetes\r\n  async getHeadlines(limit: number = 5): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(`/news/headlines?limit=${limit}`);\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n};\r\n\r\n// Serviços de Calendário Econômico\r\n// Função para mapear dados do backend para o formato do frontend\r\nconst mapEconomicEvent = (backendEvent: any): EconomicEvent => {\r\n  // Extrair data e hora do campo datetime se disponível\r\n  let date = backendEvent.date;\r\n  let time = backendEvent.time;\r\n  \r\n  if (backendEvent.datetime && !date) {\r\n    const datetime = new Date(backendEvent.datetime);\r\n    date = datetime.toISOString().split('T')[0]; // YYYY-MM-DD\r\n    time = datetime.toTimeString().slice(0, 5); // HH:MM\r\n  }\r\n  \r\n  return {\r\n    id: backendEvent.id?.toString() || Math.random().toString(),\r\n    title: backendEvent.title || backendEvent.event || 'Evento Econômico',\r\n    description: backendEvent.description || '',\r\n    date: date || new Date().toISOString().split('T')[0],\r\n    time: time,\r\n    country: backendEvent.country || 'US',\r\n    importance: (backendEvent.importance?.toLowerCase() || 'medium') as 'low' | 'medium' | 'high',\r\n    category: backendEvent.category || 'Economic',\r\n    actual: backendEvent.actual,\r\n    forecast: backendEvent.forecast,\r\n    previous: backendEvent.previous,\r\n    currency: backendEvent.currency,\r\n    impact: backendEvent.impact as 'positive' | 'negative' | 'neutral' | undefined\r\n  };\r\n};\r\n\r\nexport const calendarService = {\r\n  // Obter eventos econômicos\r\n  async getEconomicEvents(filters: CalendarFilter = {}): Promise<EconomicEvent[]> {\r\n    const params = new URLSearchParams();\r\n    \r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value) {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/calendar/events?${params.toString()}`\r\n    );\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Obter eventos de hoje\r\n  async getTodayEvents(filters: CalendarFilter = {}): Promise<EconomicEvent[]> {\r\n    let url = '/calendar/today';\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.country) params.append('country', filters.country);\r\n    if (filters.importance) params.append('importance', filters.importance);\r\n    if (filters.category) params.append('category', filters.category);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(url);\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Obter eventos da semana\r\n  async getThisWeekEvents(filters: CalendarFilter = {}): Promise<EconomicEvent[]> {\r\n    let url = '/calendar/week';\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.country) params.append('country', filters.country);\r\n    if (filters.importance) params.append('importance', filters.importance);\r\n    if (filters.category) params.append('category', filters.category);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(url);\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Obter próximos eventos\r\n  async getUpcomingEvents(\r\n    days: number = 7,\r\n    filters: CalendarFilter = {}\r\n  ): Promise<EconomicEvent[]> {\r\n    const params = new URLSearchParams();\r\n    params.append('days', days.toString());\r\n    \r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value) {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/calendar/upcoming?${params.toString()}`\r\n    );\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Obter países disponíveis\r\n  async getAvailableCountries(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/calendar/countries');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter categorias de eventos\r\n  async getEventCategories(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/calendar/categories');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter níveis de importância\r\n  async getImportanceLevels(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/calendar/importance-levels');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter resumo do calendário\r\n  async getCalendarSummary(): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get('/calendar/summary');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter eventos por data específica\r\n  async getEventsByDate(date: string, filters: CalendarFilter = {}): Promise<EconomicEvent[]> {\r\n    let url = `/calendar/events`;\r\n    const params = new URLSearchParams();\r\n    \r\n    params.append('date', date);\r\n    if (filters.country) params.append('country', filters.country);\r\n    if (filters.importance) params.append('importance', filters.importance);\r\n    if (filters.category) params.append('category', filters.category);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(url);\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Buscar eventos\r\n  async searchEvents(query: string, limit: number = 20): Promise<EconomicEvent[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/calendar/search?query=${encodeURIComponent(query)}&limit=${limit}`\r\n    );\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n};\r\n\r\n// Exportar instância do axios para uso direto se necessário\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}