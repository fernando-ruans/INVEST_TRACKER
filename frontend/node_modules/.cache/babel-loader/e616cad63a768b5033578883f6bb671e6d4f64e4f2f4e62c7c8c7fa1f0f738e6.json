{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ferna\\\\INVEST_TRACKER\\\\frontend\\\\src\\\\contexts\\\\ThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const useTheme = () => {\n  _s();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const [theme, setTheme] = useState(() => {\n    // Check localStorage first, then system preference\n    const savedTheme = localStorage.getItem('theme');\n    console.log('ThemeProvider inicializado - tema salvo:', savedTheme);\n    if (savedTheme) {\n      return savedTheme;\n    }\n\n    // Check system preference\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      console.log('Sistema prefere tema escuro');\n      return 'dark';\n    }\n    console.log('Usando tema claro padrão');\n    return 'light';\n  });\n  useEffect(() => {\n    const root = window.document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n  const toggleTheme = () => {\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"6o2B7cV29qbf95k72g/2NyE4AGI=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","ThemeContext","undefined","useTheme","_s","context","Error","ThemeProvider","children","_s2","theme","setTheme","savedTheme","localStorage","getItem","console","log","window","matchMedia","matches","root","document","documentElement","classList","add","remove","setItem","toggleTheme","prevTheme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ferna/INVEST_TRACKER/frontend/src/contexts/ThemeContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\ntype Theme = 'light' | 'dark';\r\n\r\ninterface ThemeContextType {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const useTheme = () => {\r\n  const context = useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme must be used within a ThemeProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [theme, setTheme] = useState<Theme>(() => {\r\n    // Check localStorage first, then system preference\r\n    const savedTheme = localStorage.getItem('theme') as Theme;\r\n    console.log('ThemeProvider inicializado - tema salvo:', savedTheme);\r\n    if (savedTheme) {\r\n      return savedTheme;\r\n    }\r\n    \r\n    // Check system preference\r\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      console.log('Sistema prefere tema escuro');\r\n      return 'dark';\r\n    }\r\n    \r\n    console.log('Usando tema claro padrão');\r\n    return 'light';\r\n  });\r\n\r\n  useEffect(() => {\r\n    const root = window.document.documentElement;\r\n    \r\n    if (theme === 'dark') {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n    \r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => prevTheme === 'light' ? 'dark' : 'light');\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS9E,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAE3E,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAMC,OAAO,GAAGT,UAAU,CAACK,YAAY,CAAC;EACxC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,QAAQ;AAQrB,OAAO,MAAMI,aAAsD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACtF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAQ,MAAM;IAC9C;IACA,MAAMc,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAU;IACzDC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEJ,UAAU,CAAC;IACnE,IAAIA,UAAU,EAAE;MACd,OAAOA,UAAU;IACnB;;IAEA;IACA,IAAIK,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,EAAE;MAC7DJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,OAAO,MAAM;IACf;IAEAD,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,OAAO,OAAO;EAChB,CAAC,CAAC;EAEFnB,SAAS,CAAC,MAAM;IACd,MAAMuB,IAAI,GAAGH,MAAM,CAACI,QAAQ,CAACC,eAAe;IAE5C,IAAIZ,KAAK,KAAK,MAAM,EAAE;MACpBU,IAAI,CAACG,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAC5B,CAAC,MAAM;MACLJ,IAAI,CAACG,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IAC/B;IAEAZ,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEhB,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMiB,WAAW,GAAGA,CAAA,KAAM;IACxBhB,QAAQ,CAACiB,SAAS,IAAIA,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EACjE,CAAC;EAED,oBACE5B,OAAA,CAACC,YAAY,CAAC4B,QAAQ;IAACC,KAAK,EAAE;MAAEpB,KAAK;MAAEiB;IAAY,CAAE;IAAAnB,QAAA,EAClDA;EAAQ;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACzB,GAAA,CAxCWF,aAAsD;AAAA4B,EAAA,GAAtD5B,aAAsD;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}