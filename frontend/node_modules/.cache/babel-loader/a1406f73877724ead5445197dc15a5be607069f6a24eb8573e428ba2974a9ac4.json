{"ast":null,"code":"import axios from'axios';// Configuração base do Axios\nconst api=axios.create({baseURL:process.env.REACT_APP_API_URL||'http://localhost:8000/api',timeout:30000,headers:{'Content-Type':'application/json'}});// Interceptor para tratamento de erros\napi.interceptors.response.use(response=>response,error=>{console.error('API Error:',error);if(error.response){var _error$response$data,_error$response$data2;// Erro com resposta do servidor\nconst message=((_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail)||((_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.message)||'Erro no servidor';throw new Error(message);}else if(error.request){// Erro de rede\nthrow new Error('Erro de conexão. Verifique sua internet.');}else{// Outros erros\nthrow new Error('Erro inesperado.');}});// Serviços de Assets\nexport const assetService={// Obter informações de um ativo\nasync getAssetInfo(symbol){const response=await api.get(\"/assets/info/\".concat(symbol));const backendData=response.data.data;// Mapear dados do backend para o formato esperado pelo frontend\nconst mappedData={symbol:backendData.symbol,name:backendData.name,price:backendData.current_price||0,change:backendData.change||0,changePercent:backendData.change_percent||0,volume:backendData.volume,marketCap:backendData.market_cap,peRatio:backendData.pe_ratio,dividendYield:backendData.dividend_yield,fiftyTwoWeekHigh:backendData.fifty_two_week_high||0,fiftyTwoWeekLow:backendData.fifty_two_week_low||0,currency:backendData.currency||'USD',exchange:backendData.exchange||'',sector:backendData.sector,industry:backendData.industry,description:backendData.description,website:backendData.website,employees:backendData.employees,founded:backendData.founded,headquarters:backendData.headquarters};return mappedData;},// Obter dados históricos\nasync getHistoricalData(symbol){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'1y';let interval=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'1d';const response=await api.get(\"/assets/historical/\".concat(symbol,\"?period=\").concat(period,\"&interval=\").concat(interval));return response.data.data;},// Buscar ativos\nasync searchAssets(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const response=await api.get(\"/assets/search?query=\".concat(encodeURIComponent(query),\"&limit=\").concat(limit));return response.data.data;},// Obter visão geral do mercado\nasync getMarketOverview(){const response=await api.get('/assets/market-overview');return response.data.data;},// Obter múltiplos ativos\nasync getMultipleAssets(symbols){const symbolsParam=symbols.join(',');const response=await api.get(\"/assets/multiple?symbols=\".concat(symbolsParam));return response.data.data;},// Obter cotação rápida\nasync getQuickQuote(symbol){const response=await api.get(\"/assets/\".concat(symbol,\"/quote\"));return response.data.data;},// Obter ativos em alta\nasync getTrendingAssets(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const response=await api.get(\"/assets/trending?limit=\".concat(limit));return response.data.data;},// Obter performance por setor\nasync getSectorPerformance(){const response=await api.get('/assets/sectors');return response.data.data;}};// Serviços de Portfolio\nexport const portfolioService={// Criar portfolio\nasync createPortfolio(data){const response=await api.post('/portfolio',data);return response.data.data;},// Obter todos os portfolios\nasync getPortfolios(){const response=await api.get('/portfolio');return response.data.data;},// Obter portfolio específico\nasync getPortfolio(id){const response=await api.get(\"/portfolio/\".concat(id));return response.data.data;},// Atualizar portfolio\nasync updatePortfolio(id,data){const response=await api.put(\"/portfolio/\".concat(id),data);return response.data.data;},// Deletar portfolio\nasync deletePortfolio(id){await api.delete(\"/portfolio/\".concat(id));},// Adicionar ativo ao portfolio\nasync addAssetToPortfolio(portfolioId,data){// Converter camelCase para snake_case para o backend\nconst backendData={symbol:data.symbol,quantity:data.quantity,average_price:data.averagePrice};const response=await api.post(\"/portfolio/\".concat(portfolioId,\"/assets\"),backendData);return response.data.data;},// Obter ativos do portfolio\nasync getPortfolioAssets(portfolioId){try{console.log(\"Fetching portfolio assets for ID: \".concat(portfolioId));const response=await api.get(\"/portfolio/\".concat(portfolioId,\"/assets\"));console.log('Portfolio assets response:',response.data);// Mapear dados do backend (snake_case) para frontend (camelCase)\nconst mappedAssets=response.data.data.map(asset=>({id:asset.id,portfolioId:asset.portfolio_id,symbol:asset.symbol,quantity:asset.quantity,averagePrice:asset.average_price,currentPrice:asset.current_price,totalValue:asset.total_value,gain:asset.profit_loss,gainPercent:asset.profit_loss_percent,createdAt:asset.created_at,updatedAt:asset.updated_at}));return mappedAssets;}catch(error){console.error('Error fetching portfolio assets:',error);throw error;}},// Atualizar ativo do portfolio\nasync updatePortfolioAsset(assetId,data){const response=await api.put(\"/portfolio/assets/\".concat(assetId),data);return response.data.data;},// Remover ativo do portfolio\nasync removeAssetFromPortfolio(assetId){await api.delete(\"/portfolio/assets/\".concat(assetId));},// Obter performance do portfolio\nasync getPortfolioPerformance(portfolioId){try{console.log(\"Fetching portfolio performance for ID: \".concat(portfolioId));const response=await api.get(\"/portfolio/\".concat(portfolioId,\"/performance\"));console.log('Portfolio performance response:',response.data);// Mapear dados do backend (snake_case) para frontend (camelCase)\nconst backendData=response.data.data;const mappedData={totalValue:backendData.total_value||0,totalInvested:backendData.total_cost||0,totalGain:backendData.total_gain_loss||0,totalGainPercent:backendData.total_gain_loss_percent||0,dayGain:backendData.day_gain||0,dayGainPercent:backendData.day_gain_percent||0,assetsPerformance:(backendData.assets_performance||[]).map(asset=>({symbol:asset.symbol,quantity:asset.quantity,averagePrice:asset.average_price,currentPrice:asset.current_price,currentValue:asset.current_value,gain:asset.gain_loss,gainPercent:asset.gain_loss_percent,dayGain:asset.day_gain||0,dayGainPercent:asset.day_gain_percent||0,weight:asset.weight||0}))};return mappedData;}catch(error){console.error('Error fetching portfolio performance:',error);throw error;}},// Obter resumo do portfolio\nasync getPortfolioSummary(portfolioId){const response=await api.get(\"/portfolio/\".concat(portfolioId,\"/summary\"));return response.data.data;},// Obter alocação do portfolio\nasync getPortfolioAllocation(portfolioId){const response=await api.get(\"/portfolio/\".concat(portfolioId,\"/allocation\"));return response.data.data;},// Sugerir rebalanceamento\nasync suggestRebalance(portfolioId,targetAllocation){const response=await api.post(\"/portfolio/\".concat(portfolioId,\"/rebalance\"),targetAllocation);return response.data.data;}};// Função para mapear dados de notícias do backend para o formato do frontend\nconst mapNewsItem=backendNews=>{var _backendNews$id;return{id:((_backendNews$id=backendNews.id)===null||_backendNews$id===void 0?void 0:_backendNews$id.toString())||Math.random().toString(),title:backendNews.title||'Título não disponível',description:backendNews.description||'',url:backendNews.url||'#',source:backendNews.source||'Fonte desconhecida',publishedDate:backendNews.published_at||backendNews.publishedDate||new Date().toISOString(),imageUrl:backendNews.image_url||backendNews.imageUrl,category:backendNews.category,sentiment:backendNews.sentiment,relevanceScore:backendNews.relevance_score||backendNews.relevanceScore};};// Serviços de Notícias\nexport const newsService={// Obter notícias financeiras\nasync getFinancialNews(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:20;let category=arguments.length>1?arguments[1]:undefined;let url=\"/news?limit=\".concat(limit);if(category&&category!=='all'){url+=\"&category=\".concat(category);}const response=await api.get(url);return response.data.data.map(mapNewsItem);},// Obter notícias de um ativo específico\nasync getAssetNews(symbol){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const response=await api.get(\"/news/asset/\".concat(symbol,\"?limit=\").concat(limit));return response.data.data.map(mapNewsItem);},// Obter categorias de notícias\nasync getNewsCategories(){const response=await api.get('/news/categories');return response.data.data;},// Obter notícias em alta\nasync getTrendingNews(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;const response=await api.get(\"/news/trending?limit=\".concat(limit));return response.data.data.map(mapNewsItem);},// Buscar notícias\nasync searchNews(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:15;const response=await api.get(\"/news/search?query=\".concat(encodeURIComponent(query),\"&limit=\").concat(limit));return response.data.data.map(mapNewsItem);},// Obter fontes de notícias\nasync getNewsSources(){const response=await api.get('/news/sources');return response.data.data;},// Obter resumo de notícias\nasync getNewsSummary(){const response=await api.get('/news/summary');return response.data.data;},// Obter manchetes\nasync getHeadlines(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;const response=await api.get(\"/news/headlines?limit=\".concat(limit));return response.data.data.map(mapNewsItem);}};// Serviços de Calendário Econômico\n// Função para mapear dados do backend para o formato do frontend\nconst mapEconomicEvent=backendEvent=>{var _backendEvent$id,_backendEvent$importa;// Extrair data e hora do campo datetime se disponível\nlet date=backendEvent.date;let time=backendEvent.time;if(backendEvent.datetime&&!date){const datetime=new Date(backendEvent.datetime);date=datetime.toISOString().split('T')[0];// YYYY-MM-DD\ntime=datetime.toTimeString().slice(0,5);// HH:MM\n}return{id:((_backendEvent$id=backendEvent.id)===null||_backendEvent$id===void 0?void 0:_backendEvent$id.toString())||Math.random().toString(),title:backendEvent.title||backendEvent.event||'Evento Econômico',description:backendEvent.description||'',date:date||new Date().toISOString().split('T')[0],time:time,country:backendEvent.country||'US',importance:((_backendEvent$importa=backendEvent.importance)===null||_backendEvent$importa===void 0?void 0:_backendEvent$importa.toLowerCase())||'medium',category:backendEvent.category||'Economic',actual:backendEvent.actual,forecast:backendEvent.forecast,previous:backendEvent.previous,currency:backendEvent.currency,impact:backendEvent.impact};};export const calendarService={// Obter eventos econômicos\nasync getEconomicEvents(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const params=new URLSearchParams();Object.entries(filters).forEach(_ref=>{let[key,value]=_ref;if(value){params.append(key,value.toString());}});const response=await api.get(\"/calendar/events?\".concat(params.toString()));return response.data.data.map(mapEconomicEvent);},// Obter eventos de hoje\nasync getTodayEvents(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let url='/calendar/today';const params=new URLSearchParams();if(filters.country)params.append('country',filters.country);if(filters.importance)params.append('importance',filters.importance);if(filters.category)params.append('category',filters.category);if(params.toString()){url+=\"?\".concat(params.toString());}const response=await api.get(url);return response.data.data.map(mapEconomicEvent);},// Obter eventos da semana\nasync getThisWeekEvents(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let url='/calendar/week';const params=new URLSearchParams();if(filters.country)params.append('country',filters.country);if(filters.importance)params.append('importance',filters.importance);if(filters.category)params.append('category',filters.category);if(params.toString()){url+=\"?\".concat(params.toString());}const response=await api.get(url);return response.data.data.map(mapEconomicEvent);},// Obter próximos eventos\nasync getUpcomingEvents(){let days=arguments.length>0&&arguments[0]!==undefined?arguments[0]:7;let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const params=new URLSearchParams();params.append('days',days.toString());Object.entries(filters).forEach(_ref2=>{let[key,value]=_ref2;if(value){params.append(key,value.toString());}});const response=await api.get(\"/calendar/upcoming?\".concat(params.toString()));return response.data.data.map(mapEconomicEvent);},// Obter países disponíveis\nasync getAvailableCountries(){const response=await api.get('/calendar/countries');return response.data.data;},// Obter categorias de eventos\nasync getEventCategories(){const response=await api.get('/calendar/categories');return response.data.data;},// Obter níveis de importância\nasync getImportanceLevels(){const response=await api.get('/calendar/importance-levels');return response.data.data;},// Obter resumo do calendário\nasync getCalendarSummary(){const response=await api.get('/calendar/summary');return response.data.data;},// Obter eventos por data específica\nasync getEventsByDate(date){let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let url=\"/calendar/events\";const params=new URLSearchParams();params.append('date',date);if(filters.country)params.append('country',filters.country);if(filters.importance)params.append('importance',filters.importance);if(filters.category)params.append('category',filters.category);if(params.toString()){url+=\"?\".concat(params.toString());}const response=await api.get(url);return response.data.data.map(mapEconomicEvent);},// Buscar eventos\nasync searchEvents(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;const response=await api.get(\"/calendar/search?query=\".concat(encodeURIComponent(query),\"&limit=\").concat(limit));return response.data.data.map(mapEconomicEvent);}};// Exportar instância do axios para uso direto se necessário\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","response","use","error","console","_error$response$data","_error$response$data2","message","data","detail","Error","request","assetService","getAssetInfo","symbol","get","concat","backendData","mappedData","name","price","current_price","change","changePercent","change_percent","volume","marketCap","market_cap","peRatio","pe_ratio","dividendYield","dividend_yield","fiftyTwoWeekHigh","fifty_two_week_high","fiftyTwoWeekLow","fifty_two_week_low","currency","exchange","sector","industry","description","website","employees","founded","headquarters","getHistoricalData","period","arguments","length","undefined","interval","searchAssets","query","limit","encodeURIComponent","getMarketOverview","getMultipleAssets","symbols","symbolsParam","join","getQuickQuote","getTrendingAssets","getSectorPerformance","portfolioService","createPortfolio","post","getPortfolios","getPortfolio","id","updatePortfolio","put","deletePortfolio","delete","addAssetToPortfolio","portfolioId","quantity","average_price","averagePrice","getPortfolioAssets","log","mappedAssets","map","asset","portfolio_id","currentPrice","totalValue","total_value","gain","profit_loss","gainPercent","profit_loss_percent","createdAt","created_at","updatedAt","updated_at","updatePortfolioAsset","assetId","removeAssetFromPortfolio","getPortfolioPerformance","totalInvested","total_cost","totalGain","total_gain_loss","totalGainPercent","total_gain_loss_percent","dayGain","day_gain","dayGainPercent","day_gain_percent","assetsPerformance","assets_performance","currentValue","current_value","gain_loss","gain_loss_percent","weight","getPortfolioSummary","getPortfolioAllocation","suggestRebalance","targetAllocation","mapNewsItem","backendNews","_backendNews$id","toString","Math","random","title","url","source","publishedDate","published_at","Date","toISOString","imageUrl","image_url","category","sentiment","relevanceScore","relevance_score","newsService","getFinancialNews","getAssetNews","getNewsCategories","getTrendingNews","searchNews","getNewsSources","getNewsSummary","getHeadlines","mapEconomicEvent","backendEvent","_backendEvent$id","_backendEvent$importa","date","time","datetime","split","toTimeString","slice","event","country","importance","toLowerCase","actual","forecast","previous","impact","calendarService","getEconomicEvents","filters","params","URLSearchParams","Object","entries","forEach","_ref","key","value","append","getTodayEvents","getThisWeekEvents","getUpcomingEvents","days","_ref2","getAvailableCountries","getEventCategories","getImportanceLevels","getCalendarSummary","getEventsByDate","searchEvents"],"sources":["C:/Users/ferna/INVEST_TRACKER/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport {\r\n  AssetInfo,\r\n  HistoricalData,\r\n  Portfolio,\r\n  PortfolioCreate,\r\n  PortfolioUpdate,\r\n  PortfolioAsset,\r\n  PortfolioAssetCreate,\r\n  PortfolioAssetUpdate,\r\n  NewsItem,\r\n  EconomicEvent,\r\n  ApiResponse,\r\n  MarketOverview,\r\n  AssetSearchResult,\r\n  QuickQuote,\r\n  SectorPerformance,\r\n  PortfolioPerformance,\r\n  PortfolioAllocation,\r\n  RebalanceSuggestion,\r\n  NewsFilter,\r\n  CalendarFilter\r\n} from '../types';\r\n\r\n// Configuração base do Axios\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para tratamento de erros\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    \r\n    if (error.response) {\r\n      // Erro com resposta do servidor\r\n      const message = error.response.data?.detail || error.response.data?.message || 'Erro no servidor';\r\n      throw new Error(message);\r\n    } else if (error.request) {\r\n      // Erro de rede\r\n      throw new Error('Erro de conexão. Verifique sua internet.');\r\n    } else {\r\n      // Outros erros\r\n      throw new Error('Erro inesperado.');\r\n    }\r\n  }\r\n);\r\n\r\n// Serviços de Assets\r\nexport const assetService = {\r\n  // Obter informações de um ativo\r\n  async getAssetInfo(symbol: string): Promise<AssetInfo> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get(`/assets/info/${symbol}`);\r\n    const backendData = response.data.data;\r\n    \r\n    // Mapear dados do backend para o formato esperado pelo frontend\r\n    const mappedData: AssetInfo = {\r\n      symbol: backendData.symbol,\r\n      name: backendData.name,\r\n      price: backendData.current_price || 0,\r\n      change: backendData.change || 0,\r\n      changePercent: backendData.change_percent || 0,\r\n      volume: backendData.volume,\r\n      marketCap: backendData.market_cap,\r\n      peRatio: backendData.pe_ratio,\r\n      dividendYield: backendData.dividend_yield,\r\n      fiftyTwoWeekHigh: backendData.fifty_two_week_high || 0,\r\n      fiftyTwoWeekLow: backendData.fifty_two_week_low || 0,\r\n      currency: backendData.currency || 'USD',\r\n      exchange: backendData.exchange || '',\r\n      sector: backendData.sector,\r\n      industry: backendData.industry,\r\n      description: backendData.description,\r\n      website: backendData.website,\r\n      employees: backendData.employees,\r\n      founded: backendData.founded,\r\n      headquarters: backendData.headquarters\r\n    };\r\n    \r\n    return mappedData;\r\n  },\r\n\r\n  // Obter dados históricos\r\n  async getHistoricalData(\r\n    symbol: string,\r\n    period: string = '1y',\r\n    interval: string = '1d'\r\n  ): Promise<HistoricalData[]> {\r\n    const response: AxiosResponse<ApiResponse<HistoricalData[]>> = await api.get(\r\n      `/assets/historical/${symbol}?period=${period}&interval=${interval}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Buscar ativos\r\n  async searchAssets(query: string, limit: number = 10): Promise<AssetSearchResult[]> {\r\n    const response: AxiosResponse<ApiResponse<AssetSearchResult[]>> = await api.get(\r\n      `/assets/search?query=${encodeURIComponent(query)}&limit=${limit}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter visão geral do mercado\r\n  async getMarketOverview(): Promise<MarketOverview> {\r\n    const response: AxiosResponse<ApiResponse<MarketOverview>> = await api.get('/assets/market-overview');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter múltiplos ativos\r\n  async getMultipleAssets(symbols: string[]): Promise<AssetInfo[]> {\r\n    const symbolsParam = symbols.join(',');\r\n    const response: AxiosResponse<ApiResponse<AssetInfo[]>> = await api.get(\r\n      `/assets/multiple?symbols=${symbolsParam}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter cotação rápida\r\n  async getQuickQuote(symbol: string): Promise<QuickQuote> {\r\n    const response: AxiosResponse<ApiResponse<QuickQuote>> = await api.get(`/assets/${symbol}/quote`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter ativos em alta\r\n  async getTrendingAssets(limit: number = 10): Promise<AssetInfo[]> {\r\n    const response: AxiosResponse<ApiResponse<AssetInfo[]>> = await api.get(\r\n      `/assets/trending?limit=${limit}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter performance por setor\r\n  async getSectorPerformance(): Promise<SectorPerformance[]> {\r\n    const response: AxiosResponse<ApiResponse<SectorPerformance[]>> = await api.get('/assets/sectors');\r\n    return response.data.data;\r\n  },\r\n};\r\n\r\n// Serviços de Portfolio\r\nexport const portfolioService = {\r\n  // Criar portfolio\r\n  async createPortfolio(data: PortfolioCreate): Promise<Portfolio> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio>> = await api.post('/portfolio', data);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter todos os portfolios\r\n  async getPortfolios(): Promise<Portfolio[]> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio[]>> = await api.get('/portfolio');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter portfolio específico\r\n  async getPortfolio(id: number): Promise<Portfolio> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio>> = await api.get(`/portfolio/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Atualizar portfolio\r\n  async updatePortfolio(id: number, data: PortfolioUpdate): Promise<Portfolio> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio>> = await api.put(`/portfolio/${id}`, data);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Deletar portfolio\r\n  async deletePortfolio(id: number): Promise<void> {\r\n    await api.delete(`/portfolio/${id}`);\r\n  },\r\n\r\n  // Adicionar ativo ao portfolio\r\n  async addAssetToPortfolio(portfolioId: number, data: PortfolioAssetCreate): Promise<PortfolioAsset> {\r\n    // Converter camelCase para snake_case para o backend\r\n    const backendData = {\r\n      symbol: data.symbol,\r\n      quantity: data.quantity,\r\n      average_price: data.averagePrice\r\n    };\r\n    \r\n    const response: AxiosResponse<ApiResponse<PortfolioAsset>> = await api.post(\r\n      `/portfolio/${portfolioId}/assets`,\r\n      backendData\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter ativos do portfolio\r\n  async getPortfolioAssets(portfolioId: number): Promise<PortfolioAsset[]> {\r\n    try {\r\n      console.log(`Fetching portfolio assets for ID: ${portfolioId}`);\r\n      const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n        `/portfolio/${portfolioId}/assets`\r\n      );\r\n      console.log('Portfolio assets response:', response.data);\r\n      \r\n      // Mapear dados do backend (snake_case) para frontend (camelCase)\r\n      const mappedAssets = response.data.data.map((asset: any) => ({\r\n        id: asset.id,\r\n        portfolioId: asset.portfolio_id,\r\n        symbol: asset.symbol,\r\n        quantity: asset.quantity,\r\n        averagePrice: asset.average_price,\r\n        currentPrice: asset.current_price,\r\n        totalValue: asset.total_value,\r\n        gain: asset.profit_loss,\r\n        gainPercent: asset.profit_loss_percent,\r\n        createdAt: asset.created_at,\r\n        updatedAt: asset.updated_at\r\n      }));\r\n      \r\n      return mappedAssets;\r\n    } catch (error) {\r\n      console.error('Error fetching portfolio assets:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Atualizar ativo do portfolio\r\n  async updatePortfolioAsset(assetId: number, data: PortfolioAssetUpdate): Promise<PortfolioAsset> {\r\n    const response: AxiosResponse<ApiResponse<PortfolioAsset>> = await api.put(\r\n      `/portfolio/assets/${assetId}`,\r\n      data\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Remover ativo do portfolio\r\n  async removeAssetFromPortfolio(assetId: number): Promise<void> {\r\n    await api.delete(`/portfolio/assets/${assetId}`);\r\n  },\r\n\r\n  // Obter performance do portfolio\r\n  async getPortfolioPerformance(portfolioId: number): Promise<PortfolioPerformance> {\r\n    try {\r\n      console.log(`Fetching portfolio performance for ID: ${portfolioId}`);\r\n      const response: AxiosResponse<ApiResponse<any>> = await api.get(\r\n        `/portfolio/${portfolioId}/performance`\r\n      );\r\n      console.log('Portfolio performance response:', response.data);\r\n      \r\n      // Mapear dados do backend (snake_case) para frontend (camelCase)\r\n      const backendData = response.data.data;\r\n      const mappedData: PortfolioPerformance = {\r\n        totalValue: backendData.total_value || 0,\r\n        totalInvested: backendData.total_cost || 0,\r\n        totalGain: backendData.total_gain_loss || 0,\r\n        totalGainPercent: backendData.total_gain_loss_percent || 0,\r\n        dayGain: backendData.day_gain || 0,\r\n        dayGainPercent: backendData.day_gain_percent || 0,\r\n        assetsPerformance: (backendData.assets_performance || []).map((asset: any) => ({\r\n          symbol: asset.symbol,\r\n          quantity: asset.quantity,\r\n          averagePrice: asset.average_price,\r\n          currentPrice: asset.current_price,\r\n          currentValue: asset.current_value,\r\n          gain: asset.gain_loss,\r\n          gainPercent: asset.gain_loss_percent,\r\n          dayGain: asset.day_gain || 0,\r\n          dayGainPercent: asset.day_gain_percent || 0,\r\n          weight: asset.weight || 0\r\n        }))\r\n      };\r\n      \r\n      return mappedData;\r\n    } catch (error) {\r\n      console.error('Error fetching portfolio performance:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obter resumo do portfolio\r\n  async getPortfolioSummary(portfolioId: number): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get(`/portfolio/${portfolioId}/summary`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter alocação do portfolio\r\n  async getPortfolioAllocation(portfolioId: number): Promise<PortfolioAllocation[]> {\r\n    const response: AxiosResponse<ApiResponse<PortfolioAllocation[]>> = await api.get(\r\n      `/portfolio/${portfolioId}/allocation`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Sugerir rebalanceamento\r\n  async suggestRebalance(\r\n    portfolioId: number,\r\n    targetAllocation: Record<string, number>\r\n  ): Promise<RebalanceSuggestion[]> {\r\n    const response: AxiosResponse<ApiResponse<RebalanceSuggestion[]>> = await api.post(\r\n      `/portfolio/${portfolioId}/rebalance`,\r\n      targetAllocation\r\n    );\r\n    return response.data.data;\r\n  },\r\n};\r\n\r\n// Função para mapear dados de notícias do backend para o formato do frontend\r\nconst mapNewsItem = (backendNews: any): NewsItem => {\r\n  return {\r\n    id: backendNews.id?.toString() || Math.random().toString(),\r\n    title: backendNews.title || 'Título não disponível',\r\n    description: backendNews.description || '',\r\n    url: backendNews.url || '#',\r\n    source: backendNews.source || 'Fonte desconhecida',\r\n    publishedDate: backendNews.published_at || backendNews.publishedDate || new Date().toISOString(),\r\n    imageUrl: backendNews.image_url || backendNews.imageUrl,\r\n    category: backendNews.category,\r\n    sentiment: backendNews.sentiment as 'positive' | 'negative' | 'neutral' | undefined,\r\n    relevanceScore: backendNews.relevance_score || backendNews.relevanceScore\r\n  };\r\n};\r\n\r\n// Serviços de Notícias\r\nexport const newsService = {\r\n  // Obter notícias financeiras\r\n  async getFinancialNews(limit: number = 20, category?: string): Promise<NewsItem[]> {\r\n    let url = `/news?limit=${limit}`;\r\n    if (category && category !== 'all') {\r\n      url += `&category=${category}`;\r\n    }\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(url);\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n\r\n  // Obter notícias de um ativo específico\r\n  async getAssetNews(symbol: string, limit: number = 10): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/news/asset/${symbol}?limit=${limit}`\r\n    );\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n\r\n  // Obter categorias de notícias\r\n  async getNewsCategories(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/news/categories');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter notícias em alta\r\n  async getTrendingNews(limit: number = 10): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(`/news/trending?limit=${limit}`);\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n\r\n  // Buscar notícias\r\n  async searchNews(query: string, limit: number = 15): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/news/search?query=${encodeURIComponent(query)}&limit=${limit}`\r\n    );\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n\r\n  // Obter fontes de notícias\r\n  async getNewsSources(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/news/sources');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter resumo de notícias\r\n  async getNewsSummary(): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get('/news/summary');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter manchetes\r\n  async getHeadlines(limit: number = 5): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(`/news/headlines?limit=${limit}`);\r\n    return response.data.data.map(mapNewsItem);\r\n  },\r\n};\r\n\r\n// Serviços de Calendário Econômico\r\n// Função para mapear dados do backend para o formato do frontend\r\nconst mapEconomicEvent = (backendEvent: any): EconomicEvent => {\r\n  // Extrair data e hora do campo datetime se disponível\r\n  let date = backendEvent.date;\r\n  let time = backendEvent.time;\r\n  \r\n  if (backendEvent.datetime && !date) {\r\n    const datetime = new Date(backendEvent.datetime);\r\n    date = datetime.toISOString().split('T')[0]; // YYYY-MM-DD\r\n    time = datetime.toTimeString().slice(0, 5); // HH:MM\r\n  }\r\n  \r\n  return {\r\n    id: backendEvent.id?.toString() || Math.random().toString(),\r\n    title: backendEvent.title || backendEvent.event || 'Evento Econômico',\r\n    description: backendEvent.description || '',\r\n    date: date || new Date().toISOString().split('T')[0],\r\n    time: time,\r\n    country: backendEvent.country || 'US',\r\n    importance: (backendEvent.importance?.toLowerCase() || 'medium') as 'low' | 'medium' | 'high',\r\n    category: backendEvent.category || 'Economic',\r\n    actual: backendEvent.actual,\r\n    forecast: backendEvent.forecast,\r\n    previous: backendEvent.previous,\r\n    currency: backendEvent.currency,\r\n    impact: backendEvent.impact as 'positive' | 'negative' | 'neutral' | undefined\r\n  };\r\n};\r\n\r\nexport const calendarService = {\r\n  // Obter eventos econômicos\r\n  async getEconomicEvents(filters: CalendarFilter = {}): Promise<EconomicEvent[]> {\r\n    const params = new URLSearchParams();\r\n    \r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value) {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/calendar/events?${params.toString()}`\r\n    );\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Obter eventos de hoje\r\n  async getTodayEvents(filters: CalendarFilter = {}): Promise<EconomicEvent[]> {\r\n    let url = '/calendar/today';\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.country) params.append('country', filters.country);\r\n    if (filters.importance) params.append('importance', filters.importance);\r\n    if (filters.category) params.append('category', filters.category);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(url);\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Obter eventos da semana\r\n  async getThisWeekEvents(filters: CalendarFilter = {}): Promise<EconomicEvent[]> {\r\n    let url = '/calendar/week';\r\n    const params = new URLSearchParams();\r\n    \r\n    if (filters.country) params.append('country', filters.country);\r\n    if (filters.importance) params.append('importance', filters.importance);\r\n    if (filters.category) params.append('category', filters.category);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(url);\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Obter próximos eventos\r\n  async getUpcomingEvents(\r\n    days: number = 7,\r\n    filters: CalendarFilter = {}\r\n  ): Promise<EconomicEvent[]> {\r\n    const params = new URLSearchParams();\r\n    params.append('days', days.toString());\r\n    \r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value) {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/calendar/upcoming?${params.toString()}`\r\n    );\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Obter países disponíveis\r\n  async getAvailableCountries(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/calendar/countries');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter categorias de eventos\r\n  async getEventCategories(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/calendar/categories');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter níveis de importância\r\n  async getImportanceLevels(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/calendar/importance-levels');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter resumo do calendário\r\n  async getCalendarSummary(): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get('/calendar/summary');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter eventos por data específica\r\n  async getEventsByDate(date: string, filters: CalendarFilter = {}): Promise<EconomicEvent[]> {\r\n    let url = `/calendar/events`;\r\n    const params = new URLSearchParams();\r\n    \r\n    params.append('date', date);\r\n    if (filters.country) params.append('country', filters.country);\r\n    if (filters.importance) params.append('importance', filters.importance);\r\n    if (filters.category) params.append('category', filters.category);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(url);\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n\r\n  // Buscar eventos\r\n  async searchEvents(query: string, limit: number = 20): Promise<EconomicEvent[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(\r\n      `/calendar/search?query=${encodeURIComponent(query)}&limit=${limit}`\r\n    );\r\n    return response.data.data.map(mapEconomicEvent);\r\n  },\r\n};\r\n\r\n// Exportar instância do axios para uso direto se necessário\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}