{"ast":null,"code":"import { api } from './api';\n// Token storage keys\nconst ACCESS_TOKEN_KEY = 'invest_tracker_access_token';\nconst TOKEN_TYPE_KEY = 'invest_tracker_token_type';\n\n// Serviço de autenticação\nexport const authService = {\n  // Registrar um novo usuário\n  async register(userData) {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  // Login de usuário\n  async login(credentials) {\n    const response = await api.post('/auth/login', credentials);\n\n    // O backend retorna access_token e token_type, mas o frontend espera accessToken e tokenType\n    const authToken = {\n      accessToken: response.data.access_token,\n      tokenType: response.data.token_type\n    };\n\n    // Salvar token no localStorage\n    localStorage.setItem(ACCESS_TOKEN_KEY, authToken.accessToken);\n    localStorage.setItem(TOKEN_TYPE_KEY, authToken.tokenType);\n\n    // Configurar o token no header padrão do axios\n    api.defaults.headers.common['Authorization'] = `${authToken.tokenType} ${authToken.accessToken}`;\n    return authToken;\n  },\n  // Logout de usuário\n  logout() {\n    localStorage.removeItem(ACCESS_TOKEN_KEY);\n    localStorage.removeItem(TOKEN_TYPE_KEY);\n    delete api.defaults.headers.common['Authorization'];\n  },\n  // Verificar se o usuário está autenticado\n  isAuthenticated() {\n    return !!localStorage.getItem(ACCESS_TOKEN_KEY);\n  },\n  // Obter token de acesso\n  getAccessToken() {\n    return localStorage.getItem(ACCESS_TOKEN_KEY);\n  },\n  // Obter tipo de token\n  getTokenType() {\n    return localStorage.getItem(TOKEN_TYPE_KEY);\n  },\n  // Configurar token de autenticação (usado ao inicializar a aplicação)\n  setupToken() {\n    const token = this.getAccessToken();\n    const tokenType = this.getTokenType();\n    if (token && tokenType) {\n      api.defaults.headers.common['Authorization'] = `${tokenType} ${token}`;\n    }\n  },\n  // Obter dados do usuário atual\n  async getCurrentUser() {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n  // Atualizar dados do usuário\n  async updateUser(userData) {\n    const response = await api.put('/auth/me', userData);\n    return response.data;\n  },\n  // Upload de avatar do usuário\n  async uploadAvatar(file) {\n    const formData = new FormData();\n    formData.append('avatar', file);\n    const response = await api.post('/auth/me/avatar', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Remover avatar do usuário\n  async removeAvatar() {\n    const response = await api.delete('/auth/me/avatar');\n    return response.data;\n  },\n  // Atualizar senha do usuário\n  async updatePassword(passwordData) {\n    const response = await api.put('/auth/me/password', passwordData);\n    return response.data;\n  },\n  // Solicitar redefinição de senha\n  async requestPasswordReset(data) {\n    const response = await api.post('/auth/forgot-password', data);\n    return response.data;\n  },\n  // Confirmar redefinição de senha\n  async confirmPasswordReset(data) {\n    const response = await api.post('/auth/reset-password', data);\n    return response.data;\n  },\n  // Verificar email\n  async verifyEmail(data) {\n    const response = await api.post('/auth/verify-email', data);\n    return response.data;\n  }\n};\n\n// Configurar interceptor para lidar com erros de autenticação\napi.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Se receber um erro 401 (não autorizado), fazer logout\n    authService.logout();\n    // Redirecionar para a página de login\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Configurar token ao importar o serviço\nauthService.setupToken();","map":{"version":3,"names":["api","ACCESS_TOKEN_KEY","TOKEN_TYPE_KEY","authService","register","userData","response","post","data","login","credentials","authToken","accessToken","access_token","tokenType","token_type","localStorage","setItem","defaults","headers","common","logout","removeItem","isAuthenticated","getItem","getAccessToken","getTokenType","setupToken","token","getCurrentUser","get","updateUser","put","uploadAvatar","file","formData","FormData","append","removeAvatar","delete","updatePassword","passwordData","requestPasswordReset","confirmPasswordReset","verifyEmail","interceptors","use","error","status","window","location","href","Promise","reject"],"sources":["C:/Users/ferna/INVEST_TRACKER/frontend/src/services/auth.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { api } from './api';\nimport {\n  User,\n  UserRegister,\n  UserLogin,\n  UserUpdate,\n  UserPasswordUpdate,\n  AuthToken,\n  PasswordResetRequest,\n  PasswordResetConfirm,\n  VerificationRequest\n} from '../types';\n\n// Token storage keys\nconst ACCESS_TOKEN_KEY = 'invest_tracker_access_token';\nconst TOKEN_TYPE_KEY = 'invest_tracker_token_type';\n\n// Serviço de autenticação\nexport const authService = {\n  // Registrar um novo usuário\n  async register(userData: UserRegister): Promise<User> {\n    const response: AxiosResponse<User> = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  // Login de usuário\n  async login(credentials: UserLogin): Promise<AuthToken> {\n    const response: AxiosResponse<any> = await api.post('/auth/login', credentials);\n    \n    // O backend retorna access_token e token_type, mas o frontend espera accessToken e tokenType\n    const authToken: AuthToken = {\n      accessToken: response.data.access_token,\n      tokenType: response.data.token_type\n    };\n    \n    // Salvar token no localStorage\n    localStorage.setItem(ACCESS_TOKEN_KEY, authToken.accessToken);\n    localStorage.setItem(TOKEN_TYPE_KEY, authToken.tokenType);\n    \n    // Configurar o token no header padrão do axios\n    api.defaults.headers.common['Authorization'] = `${authToken.tokenType} ${authToken.accessToken}`;\n    \n    return authToken;\n  },\n\n  // Logout de usuário\n  logout(): void {\n    localStorage.removeItem(ACCESS_TOKEN_KEY);\n    localStorage.removeItem(TOKEN_TYPE_KEY);\n    delete api.defaults.headers.common['Authorization'];\n  },\n\n  // Verificar se o usuário está autenticado\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem(ACCESS_TOKEN_KEY);\n  },\n\n  // Obter token de acesso\n  getAccessToken(): string | null {\n    return localStorage.getItem(ACCESS_TOKEN_KEY);\n  },\n\n  // Obter tipo de token\n  getTokenType(): string | null {\n    return localStorage.getItem(TOKEN_TYPE_KEY);\n  },\n\n  // Configurar token de autenticação (usado ao inicializar a aplicação)\n  setupToken(): void {\n    const token = this.getAccessToken();\n    const tokenType = this.getTokenType();\n    \n    if (token && tokenType) {\n      api.defaults.headers.common['Authorization'] = `${tokenType} ${token}`;\n    }\n  },\n\n  // Obter dados do usuário atual\n  async getCurrentUser(): Promise<User> {\n    const response: AxiosResponse<User> = await api.get('/auth/me');\n    return response.data;\n  },\n\n  // Atualizar dados do usuário\n  async updateUser(userData: UserUpdate): Promise<User> {\n    const response: AxiosResponse<User> = await api.put('/auth/me', userData);\n    return response.data;\n  },\n\n  // Upload de avatar do usuário\n  async uploadAvatar(file: File): Promise<User> {\n    const formData = new FormData();\n    formData.append('avatar', file);\n    \n    const response: AxiosResponse<User> = await api.post('/auth/me/avatar', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // Remover avatar do usuário\n  async removeAvatar(): Promise<User> {\n    const response: AxiosResponse<User> = await api.delete('/auth/me/avatar');\n    return response.data;\n  },\n\n  // Atualizar senha do usuário\n  async updatePassword(passwordData: UserPasswordUpdate): Promise<{ message: string }> {\n    const response: AxiosResponse<{ message: string }> = await api.put('/auth/me/password', passwordData);\n    return response.data;\n  },\n\n  // Solicitar redefinição de senha\n  async requestPasswordReset(data: PasswordResetRequest): Promise<{ message: string }> {\n    const response: AxiosResponse<{ message: string }> = await api.post('/auth/forgot-password', data);\n    return response.data;\n  },\n\n  // Confirmar redefinição de senha\n  async confirmPasswordReset(data: PasswordResetConfirm): Promise<{ message: string }> {\n    const response: AxiosResponse<{ message: string }> = await api.post('/auth/reset-password', data);\n    return response.data;\n  },\n\n  // Verificar email\n  async verifyEmail(data: VerificationRequest): Promise<{ message: string }> {\n    const response: AxiosResponse<{ message: string }> = await api.post('/auth/verify-email', data);\n    return response.data;\n  }\n};\n\n// Configurar interceptor para lidar com erros de autenticação\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Se receber um erro 401 (não autorizado), fazer logout\n      authService.logout();\n      // Redirecionar para a página de login\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Configurar token ao importar o serviço\nauthService.setupToken();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}