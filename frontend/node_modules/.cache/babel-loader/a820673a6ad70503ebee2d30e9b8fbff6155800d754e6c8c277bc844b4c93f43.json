{"ast":null,"code":"import{api}from'./api';// Token storage keys\nconst ACCESS_TOKEN_KEY='invest_tracker_access_token';const TOKEN_TYPE_KEY='invest_tracker_token_type';// Serviço de autenticação\nexport const authService={// Registrar um novo usuário\nasync register(userData){const response=await api.post('/auth/register',userData);return response.data;},// Login de usuário\nasync login(credentials){const response=await api.post('/auth/login',credentials);// O backend retorna access_token e token_type, mas o frontend espera accessToken e tokenType\nconst authToken={accessToken:response.data.access_token,tokenType:response.data.token_type};// Salvar token no localStorage\nlocalStorage.setItem(ACCESS_TOKEN_KEY,authToken.accessToken);localStorage.setItem(TOKEN_TYPE_KEY,authToken.tokenType);// Configurar o token no header padrão do axios\napi.defaults.headers.common['Authorization']=\"\".concat(authToken.tokenType,\" \").concat(authToken.accessToken);return authToken;},// Logout de usuário\nlogout(){localStorage.removeItem(ACCESS_TOKEN_KEY);localStorage.removeItem(TOKEN_TYPE_KEY);delete api.defaults.headers.common['Authorization'];},// Verificar se o usuário está autenticado\nisAuthenticated(){return!!localStorage.getItem(ACCESS_TOKEN_KEY);},// Obter token de acesso\ngetAccessToken(){return localStorage.getItem(ACCESS_TOKEN_KEY);},// Obter tipo de token\ngetTokenType(){return localStorage.getItem(TOKEN_TYPE_KEY);},// Configurar token de autenticação (usado ao inicializar a aplicação)\nsetupToken(){const token=this.getAccessToken();const tokenType=this.getTokenType();if(token&&tokenType){api.defaults.headers.common['Authorization']=\"\".concat(tokenType,\" \").concat(token);}},// Obter dados do usuário atual\nasync getCurrentUser(){const response=await api.get('/auth/me');return response.data;},// Atualizar dados do usuário\nasync updateUser(userData){const response=await api.put('/auth/me',userData);return response.data;},// Atualizar senha do usuário\nasync updatePassword(passwordData){const response=await api.put('/auth/me/password',passwordData);return response.data;},// Solicitar redefinição de senha\nasync requestPasswordReset(data){const response=await api.post('/auth/forgot-password',data);return response.data;},// Confirmar redefinição de senha\nasync confirmPasswordReset(data){const response=await api.post('/auth/reset-password',data);return response.data;},// Verificar email\nasync verifyEmail(data){const response=await api.post('/auth/verify-email',data);return response.data;}};// Configurar interceptor para lidar com erros de autenticação\napi.interceptors.response.use(response=>response,error=>{if(error.response&&error.response.status===401){// Se receber um erro 401 (não autorizado), fazer logout\nauthService.logout();// Redirecionar para a página de login\nwindow.location.href='/login';}return Promise.reject(error);});// Configurar token ao importar o serviço\nauthService.setupToken();","map":{"version":3,"names":["api","ACCESS_TOKEN_KEY","TOKEN_TYPE_KEY","authService","register","userData","response","post","data","login","credentials","authToken","accessToken","access_token","tokenType","token_type","localStorage","setItem","defaults","headers","common","concat","logout","removeItem","isAuthenticated","getItem","getAccessToken","getTokenType","setupToken","token","getCurrentUser","get","updateUser","put","updatePassword","passwordData","requestPasswordReset","confirmPasswordReset","verifyEmail","interceptors","use","error","status","window","location","href","Promise","reject"],"sources":["C:/Users/ferna/INVEST_TRACKER/frontend/src/services/auth.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { api } from './api';\nimport {\n  User,\n  UserRegister,\n  UserLogin,\n  UserUpdate,\n  UserPasswordUpdate,\n  AuthToken,\n  PasswordResetRequest,\n  PasswordResetConfirm,\n  VerificationRequest\n} from '../types';\n\n// Token storage keys\nconst ACCESS_TOKEN_KEY = 'invest_tracker_access_token';\nconst TOKEN_TYPE_KEY = 'invest_tracker_token_type';\n\n// Serviço de autenticação\nexport const authService = {\n  // Registrar um novo usuário\n  async register(userData: UserRegister): Promise<User> {\n    const response: AxiosResponse<User> = await api.post('/auth/register', userData);\n    return response.data;\n  },\n\n  // Login de usuário\n  async login(credentials: UserLogin): Promise<AuthToken> {\n    const response: AxiosResponse<any> = await api.post('/auth/login', credentials);\n    \n    // O backend retorna access_token e token_type, mas o frontend espera accessToken e tokenType\n    const authToken: AuthToken = {\n      accessToken: response.data.access_token,\n      tokenType: response.data.token_type\n    };\n    \n    // Salvar token no localStorage\n    localStorage.setItem(ACCESS_TOKEN_KEY, authToken.accessToken);\n    localStorage.setItem(TOKEN_TYPE_KEY, authToken.tokenType);\n    \n    // Configurar o token no header padrão do axios\n    api.defaults.headers.common['Authorization'] = `${authToken.tokenType} ${authToken.accessToken}`;\n    \n    return authToken;\n  },\n\n  // Logout de usuário\n  logout(): void {\n    localStorage.removeItem(ACCESS_TOKEN_KEY);\n    localStorage.removeItem(TOKEN_TYPE_KEY);\n    delete api.defaults.headers.common['Authorization'];\n  },\n\n  // Verificar se o usuário está autenticado\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem(ACCESS_TOKEN_KEY);\n  },\n\n  // Obter token de acesso\n  getAccessToken(): string | null {\n    return localStorage.getItem(ACCESS_TOKEN_KEY);\n  },\n\n  // Obter tipo de token\n  getTokenType(): string | null {\n    return localStorage.getItem(TOKEN_TYPE_KEY);\n  },\n\n  // Configurar token de autenticação (usado ao inicializar a aplicação)\n  setupToken(): void {\n    const token = this.getAccessToken();\n    const tokenType = this.getTokenType();\n    \n    if (token && tokenType) {\n      api.defaults.headers.common['Authorization'] = `${tokenType} ${token}`;\n    }\n  },\n\n  // Obter dados do usuário atual\n  async getCurrentUser(): Promise<User> {\n    const response: AxiosResponse<User> = await api.get('/auth/me');\n    return response.data;\n  },\n\n  // Atualizar dados do usuário\n  async updateUser(userData: UserUpdate): Promise<User> {\n    const response: AxiosResponse<User> = await api.put('/auth/me', userData);\n    return response.data;\n  },\n\n  // Atualizar senha do usuário\n  async updatePassword(passwordData: UserPasswordUpdate): Promise<{ message: string }> {\n    const response: AxiosResponse<{ message: string }> = await api.put('/auth/me/password', passwordData);\n    return response.data;\n  },\n\n  // Solicitar redefinição de senha\n  async requestPasswordReset(data: PasswordResetRequest): Promise<{ message: string }> {\n    const response: AxiosResponse<{ message: string }> = await api.post('/auth/forgot-password', data);\n    return response.data;\n  },\n\n  // Confirmar redefinição de senha\n  async confirmPasswordReset(data: PasswordResetConfirm): Promise<{ message: string }> {\n    const response: AxiosResponse<{ message: string }> = await api.post('/auth/reset-password', data);\n    return response.data;\n  },\n\n  // Verificar email\n  async verifyEmail(data: VerificationRequest): Promise<{ message: string }> {\n    const response: AxiosResponse<{ message: string }> = await api.post('/auth/verify-email', data);\n    return response.data;\n  }\n};\n\n// Configurar interceptor para lidar com erros de autenticação\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Se receber um erro 401 (não autorizado), fazer logout\n      authService.logout();\n      // Redirecionar para a página de login\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Configurar token ao importar o serviço\nauthService.setupToken();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}