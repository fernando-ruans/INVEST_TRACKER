{"ast":null,"code":"import React,{createContext,useState,useEffect,useContext}from'react';import{useNavigate}from'react-router-dom';import{authService}from'../services';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[isLoading,setIsLoading]=useState(true);const navigate=useNavigate();// Verificar se o usuário está autenticado ao carregar a aplicação\nuseEffect(()=>{const checkAuth=async()=>{if(authService.isAuthenticated()){try{const userData=await authService.getCurrentUser();setUser(userData);}catch(error){console.error('Erro ao obter dados do usuário:',error);authService.logout();}}setIsLoading(false);};checkAuth();},[]);// Função de login\nconst login=async(username,password)=>{setIsLoading(true);try{await authService.login({username,password});const userData=await authService.getCurrentUser();setUser(userData);navigate('/');}catch(error){console.error('Erro ao fazer login:',error);throw error;}finally{setIsLoading(false);}};// Função de logout\nconst logout=()=>{authService.logout();setUser(null);navigate('/login');};// Função de registro\nconst register=async(email,username,password,fullName)=>{setIsLoading(true);try{await authService.register({email,username,password,fullName});navigate('/login');}catch(error){console.error('Erro ao registrar usuário:',error);throw error;}finally{setIsLoading(false);}};// Função para atualizar dados do usuário\nconst updateUser=async data=>{setIsLoading(true);try{const updatedUser=await authService.updateUser(data);setUser(updatedUser);}catch(error){console.error('Erro ao atualizar usuário:',error);throw error;}finally{setIsLoading(false);}};// Função para atualizar senha\nconst updatePassword=async(currentPassword,newPassword)=>{setIsLoading(true);try{await authService.updatePassword({currentPassword,newPassword});}catch(error){console.error('Erro ao atualizar senha:',error);throw error;}finally{setIsLoading(false);}};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,isAuthenticated:!!user,isLoading,login,logout,register,updateUser,updatePassword},children:children});};// Hook personalizado para usar o contexto de autenticação\nexport const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth deve ser usado dentro de um AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","authService","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","user","setUser","isLoading","setIsLoading","navigate","checkAuth","isAuthenticated","userData","getCurrentUser","error","console","logout","login","username","password","register","email","fullName","updateUser","data","updatedUser","updatePassword","currentPassword","newPassword","Provider","value","useAuth","context","Error"],"sources":["C:/Users/ferna/INVEST_TRACKER/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { authService } from '../services';\nimport { User } from '../types';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  register: (email: string, username: string, password: string, fullName?: string) => Promise<void>;\n  updateUser: (data: { email?: string; username?: string; fullName?: string }) => Promise<void>;\n  updatePassword: (currentPassword: string, newPassword: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Verificar se o usuário está autenticado ao carregar a aplicação\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (authService.isAuthenticated()) {\n        try {\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        } catch (error) {\n          console.error('Erro ao obter dados do usuário:', error);\n          authService.logout();\n        }\n      }\n      setIsLoading(false);\n    };\n\n    checkAuth();\n  }, []);\n\n  // Função de login\n  const login = async (username: string, password: string) => {\n    setIsLoading(true);\n    try {\n      await authService.login({ username, password });\n      const userData = await authService.getCurrentUser();\n      setUser(userData);\n      navigate('/');\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função de logout\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    navigate('/login');\n  };\n\n  // Função de registro\n  const register = async (email: string, username: string, password: string, fullName?: string) => {\n    setIsLoading(true);\n    try {\n      await authService.register({ email, username, password, fullName });\n      navigate('/login');\n    } catch (error) {\n      console.error('Erro ao registrar usuário:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para atualizar dados do usuário\n  const updateUser = async (data: { email?: string; username?: string; fullName?: string }) => {\n    setIsLoading(true);\n    try {\n      const updatedUser = await authService.updateUser(data);\n      setUser(updatedUser);\n    } catch (error) {\n      console.error('Erro ao atualizar usuário:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para atualizar senha\n  const updatePassword = async (currentPassword: string, newPassword: string) => {\n    setIsLoading(true);\n    try {\n      await authService.updatePassword({ currentPassword, newPassword });\n    } catch (error) {\n      console.error('Erro ao atualizar senha:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated: !!user,\n        isLoading,\n        login,\n        logout,\n        register,\n        updateUser,\n        updatePassword,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Hook personalizado para usar o contexto de autenticação\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}