{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ferna\\\\INVEST_TRACKER\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { authService } from '../services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Verificar se o usuário está autenticado ao carregar a aplicação\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (authService.isAuthenticated()) {\n        try {\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        } catch (error) {\n          console.error('Erro ao obter dados do usuário:', error);\n          authService.logout();\n        }\n      }\n      setIsLoading(false);\n    };\n    checkAuth();\n  }, []);\n\n  // Função de login\n  const login = async (username, password) => {\n    setIsLoading(true);\n    try {\n      await authService.login({\n        username,\n        password\n      });\n      const userData = await authService.getCurrentUser();\n      setUser(userData);\n      navigate('/');\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função de logout\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    navigate('/login');\n  };\n\n  // Função de registro\n  const register = async (email, username, password, fullName) => {\n    setIsLoading(true);\n    try {\n      await authService.register({\n        email,\n        username,\n        password,\n        fullName\n      });\n      navigate('/login');\n    } catch (error) {\n      console.error('Erro ao registrar usuário:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para atualizar dados do usuário\n  const updateUser = async data => {\n    setIsLoading(true);\n    try {\n      const updatedUser = await authService.updateUser(data);\n      setUser(updatedUser);\n    } catch (error) {\n      console.error('Erro ao atualizar usuário:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para upload de avatar\n  const uploadAvatar = async file => {\n    setIsLoading(true);\n    try {\n      const updatedUser = await authService.uploadAvatar(file);\n      setUser(updatedUser);\n    } catch (error) {\n      console.error('Erro ao fazer upload do avatar:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para remover avatar\n  const removeAvatar = async () => {\n    setIsLoading(true);\n    try {\n      const updatedUser = await authService.removeAvatar();\n      setUser(updatedUser);\n    } catch (error) {\n      console.error('Erro ao remover avatar:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para atualizar senha\n  const updatePassword = async (currentPassword, newPassword) => {\n    setIsLoading(true);\n    try {\n      await authService.updatePassword({\n        current_password: currentPassword,\n        new_password: newPassword\n      });\n    } catch (error) {\n      console.error('Erro ao atualizar senha:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated: !!user,\n      isLoading,\n      login,\n      logout,\n      register,\n      updateUser,\n      updatePassword,\n      uploadAvatar,\n      removeAvatar\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para usar o contexto de autenticação\n_s(AuthProvider, \"o5QfC7aYrUkj9YQ0lGSakMfCddo=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useNavigate","authService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","navigate","checkAuth","isAuthenticated","userData","getCurrentUser","error","console","logout","login","username","password","register","email","fullName","updateUser","data","updatedUser","uploadAvatar","file","removeAvatar","updatePassword","currentPassword","newPassword","current_password","new_password","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ferna/INVEST_TRACKER/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { authService } from '../services';\nimport { User } from '../types';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  register: (email: string, username: string, password: string, fullName?: string) => Promise<void>;\n  updateUser: (data: { email?: string; username?: string; full_name?: string; avatar?: string }) => Promise<void>;\n  updatePassword: (currentPassword: string, newPassword: string) => Promise<void>;\n  uploadAvatar: (file: File) => Promise<void>;\n  removeAvatar: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n\n  // Verificar se o usuário está autenticado ao carregar a aplicação\n  useEffect(() => {\n    const checkAuth = async () => {\n      if (authService.isAuthenticated()) {\n        try {\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        } catch (error) {\n          console.error('Erro ao obter dados do usuário:', error);\n          authService.logout();\n        }\n      }\n      setIsLoading(false);\n    };\n\n    checkAuth();\n  }, []);\n\n  // Função de login\n  const login = async (username: string, password: string) => {\n    setIsLoading(true);\n    try {\n      await authService.login({ username, password });\n      const userData = await authService.getCurrentUser();\n      setUser(userData);\n      navigate('/');\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função de logout\n  const logout = () => {\n    authService.logout();\n    setUser(null);\n    navigate('/login');\n  };\n\n  // Função de registro\n  const register = async (email: string, username: string, password: string, fullName?: string) => {\n    setIsLoading(true);\n    try {\n      await authService.register({ email, username, password, fullName });\n      navigate('/login');\n    } catch (error) {\n      console.error('Erro ao registrar usuário:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para atualizar dados do usuário\n  const updateUser = async (data: { email?: string; username?: string; full_name?: string; avatar?: string }) => {\n    setIsLoading(true);\n    try {\n      const updatedUser = await authService.updateUser(data);\n      setUser(updatedUser);\n    } catch (error) {\n      console.error('Erro ao atualizar usuário:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para upload de avatar\n  const uploadAvatar = async (file: File) => {\n    setIsLoading(true);\n    try {\n      const updatedUser = await authService.uploadAvatar(file);\n      setUser(updatedUser);\n    } catch (error) {\n      console.error('Erro ao fazer upload do avatar:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para remover avatar\n  const removeAvatar = async () => {\n    setIsLoading(true);\n    try {\n      const updatedUser = await authService.removeAvatar();\n      setUser(updatedUser);\n    } catch (error) {\n      console.error('Erro ao remover avatar:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Função para atualizar senha\n  const updatePassword = async (currentPassword: string, newPassword: string) => {\n    setIsLoading(true);\n    try {\n      await authService.updatePassword({ current_password: currentPassword, new_password: newPassword });\n    } catch (error) {\n      console.error('Erro ao atualizar senha:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated: !!user,\n        isLoading,\n        login,\n        logout,\n        register,\n        updateUser,\n        updatePassword,\n        uploadAvatar,\n        removeAvatar,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Hook personalizado para usar o contexto de autenticação\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}