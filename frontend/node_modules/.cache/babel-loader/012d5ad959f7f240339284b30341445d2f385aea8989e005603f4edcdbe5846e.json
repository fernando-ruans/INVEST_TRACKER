{"ast":null,"code":"import axios from 'axios';\n// Configuração base do Axios\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para tratamento de erros\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  if (error.response) {\n    var _error$response$data, _error$response$data2;\n    // Erro com resposta do servidor\n    const message = ((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Erro no servidor';\n    throw new Error(message);\n  } else if (error.request) {\n    // Erro de rede\n    throw new Error('Erro de conexão. Verifique sua internet.');\n  } else {\n    // Outros erros\n    throw new Error('Erro inesperado.');\n  }\n});\n\n// Serviços de Assets\nexport const assetService = {\n  // Obter informações de um ativo\n  async getAssetInfo(symbol) {\n    const response = await api.get(`/assets/${symbol}`);\n    return response.data.data;\n  },\n  // Obter dados históricos\n  async getHistoricalData(symbol, period = '1y', interval = '1d') {\n    const response = await api.get(`/assets/${symbol}/historical?period=${period}&interval=${interval}`);\n    return response.data.data;\n  },\n  // Buscar ativos\n  async searchAssets(query, limit = 10) {\n    const response = await api.get(`/assets/search?q=${encodeURIComponent(query)}&limit=${limit}`);\n    return response.data.data;\n  },\n  // Obter visão geral do mercado\n  async getMarketOverview() {\n    const response = await api.get('/assets/market-overview');\n    return response.data.data;\n  },\n  // Obter múltiplos ativos\n  async getMultipleAssets(symbols) {\n    const symbolsParam = symbols.join(',');\n    const response = await api.get(`/assets/multiple?symbols=${symbolsParam}`);\n    return response.data.data;\n  },\n  // Obter cotação rápida\n  async getQuickQuote(symbol) {\n    const response = await api.get(`/assets/${symbol}/quote`);\n    return response.data.data;\n  },\n  // Obter ativos em alta\n  async getTrendingAssets(limit = 10) {\n    const response = await api.get(`/assets/trending?limit=${limit}`);\n    return response.data.data;\n  },\n  // Obter performance por setor\n  async getSectorPerformance() {\n    const response = await api.get('/assets/sectors');\n    return response.data.data;\n  }\n};\n\n// Serviços de Portfolio\nexport const portfolioService = {\n  // Criar portfolio\n  async createPortfolio(data) {\n    const response = await api.post('/portfolio', data);\n    return response.data.data;\n  },\n  // Obter todos os portfolios\n  async getPortfolios() {\n    const response = await api.get('/portfolio');\n    return response.data.data;\n  },\n  // Obter portfolio específico\n  async getPortfolio(id) {\n    const response = await api.get(`/portfolio/${id}`);\n    return response.data.data;\n  },\n  // Atualizar portfolio\n  async updatePortfolio(id, data) {\n    const response = await api.put(`/portfolio/${id}`, data);\n    return response.data.data;\n  },\n  // Deletar portfolio\n  async deletePortfolio(id) {\n    await api.delete(`/portfolio/${id}`);\n  },\n  // Adicionar ativo ao portfolio\n  async addAssetToPortfolio(portfolioId, data) {\n    const response = await api.post(`/portfolio/${portfolioId}/assets`, data);\n    return response.data.data;\n  },\n  // Obter ativos do portfolio\n  async getPortfolioAssets(portfolioId) {\n    const response = await api.get(`/portfolio/${portfolioId}/assets`);\n    return response.data.data;\n  },\n  // Atualizar ativo do portfolio\n  async updatePortfolioAsset(assetId, data) {\n    const response = await api.put(`/portfolio/assets/${assetId}`, data);\n    return response.data.data;\n  },\n  // Remover ativo do portfolio\n  async removeAssetFromPortfolio(assetId) {\n    await api.delete(`/portfolio/assets/${assetId}`);\n  },\n  // Obter performance do portfolio\n  async getPortfolioPerformance(portfolioId) {\n    const response = await api.get(`/portfolio/${portfolioId}/performance`);\n    return response.data.data;\n  },\n  // Obter resumo do portfolio\n  async getPortfolioSummary(portfolioId) {\n    const response = await api.get(`/portfolio/${portfolioId}/summary`);\n    return response.data.data;\n  },\n  // Obter alocação do portfolio\n  async getPortfolioAllocation(portfolioId) {\n    const response = await api.get(`/portfolio/${portfolioId}/allocation`);\n    return response.data.data;\n  },\n  // Sugerir rebalanceamento\n  async suggestRebalance(portfolioId, targetAllocation) {\n    const response = await api.post(`/portfolio/${portfolioId}/rebalance`, targetAllocation);\n    return response.data.data;\n  }\n};\n\n// Serviços de Notícias\nexport const newsService = {\n  // Obter notícias financeiras\n  async getFinancialNews(limit = 20, category) {\n    let url = `/news?limit=${limit}`;\n    if (category) {\n      url += `&category=${category}`;\n    }\n    const response = await api.get(url);\n    return response.data.data;\n  },\n  // Obter notícias de um ativo específico\n  async getAssetNews(symbol, limit = 10) {\n    const response = await api.get(`/news/asset/${symbol}?limit=${limit}`);\n    return response.data.data;\n  },\n  // Obter categorias de notícias\n  async getNewsCategories() {\n    const response = await api.get('/news/categories');\n    return response.data.data;\n  },\n  // Obter notícias em alta\n  async getTrendingNews(limit = 10) {\n    const response = await api.get(`/news/trending?limit=${limit}`);\n    return response.data.data;\n  },\n  // Buscar notícias\n  async searchNews(query, limit = 15) {\n    const response = await api.get(`/news/search?query=${encodeURIComponent(query)}&limit=${limit}`);\n    return response.data.data;\n  },\n  // Obter fontes de notícias\n  async getNewsSources() {\n    const response = await api.get('/news/sources');\n    return response.data.data;\n  },\n  // Obter resumo de notícias\n  async getNewsSummary() {\n    const response = await api.get('/news/summary');\n    return response.data.data;\n  },\n  // Obter manchetes\n  async getHeadlines(limit = 5) {\n    const response = await api.get(`/news/headlines?limit=${limit}`);\n    return response.data.data;\n  }\n};\n\n// Serviços de Calendário Econômico\nexport const calendarService = {\n  // Obter eventos econômicos\n  async getEconomicEvents(filters = {}) {\n    const params = new URLSearchParams();\n    Object.entries(filters).forEach(([key, value]) => {\n      if (value) {\n        params.append(key, value.toString());\n      }\n    });\n    const response = await api.get(`/calendar/events?${params.toString()}`);\n    return response.data.data;\n  },\n  // Obter eventos de hoje\n  async getTodayEvents(country, importance) {\n    let url = '/calendar/today';\n    const params = new URLSearchParams();\n    if (country) params.append('country', country);\n    if (importance) params.append('importance', importance);\n    if (params.toString()) {\n      url += `?${params.toString()}`;\n    }\n    const response = await api.get(url);\n    return response.data.data;\n  },\n  // Obter eventos da semana\n  async getWeekEvents(country, importance) {\n    let url = '/calendar/week';\n    const params = new URLSearchParams();\n    if (country) params.append('country', country);\n    if (importance) params.append('importance', importance);\n    if (params.toString()) {\n      url += `?${params.toString()}`;\n    }\n    const response = await api.get(url);\n    return response.data.data;\n  },\n  // Obter próximos eventos\n  async getUpcomingEvents(days = 7, country, importance, limit = 20) {\n    const params = new URLSearchParams({\n      days: days.toString(),\n      limit: limit.toString()\n    });\n    if (country) params.append('country', country);\n    if (importance) params.append('importance', importance);\n    const response = await api.get(`/calendar/upcoming?${params.toString()}`);\n    return response.data.data;\n  },\n  // Obter países disponíveis\n  async getAvailableCountries() {\n    const response = await api.get('/calendar/countries');\n    return response.data.data;\n  },\n  // Obter categorias de eventos\n  async getEventCategories() {\n    const response = await api.get('/calendar/categories');\n    return response.data.data;\n  },\n  // Obter níveis de importância\n  async getImportanceLevels() {\n    const response = await api.get('/calendar/importance-levels');\n    return response.data.data;\n  },\n  // Obter resumo do calendário\n  async getCalendarSummary() {\n    const response = await api.get('/calendar/summary');\n    return response.data.data;\n  },\n  // Buscar eventos\n  async searchEvents(query, limit = 20) {\n    const response = await api.get(`/calendar/search?query=${encodeURIComponent(query)}&limit=${limit}`);\n    return response.data.data;\n  }\n};\n\n// Exportar instância do axios para uso direto se necessário\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","response","use","error","console","_error$response$data","_error$response$data2","message","data","detail","Error","request","assetService","getAssetInfo","symbol","get","getHistoricalData","period","interval","searchAssets","query","limit","encodeURIComponent","getMarketOverview","getMultipleAssets","symbols","symbolsParam","join","getQuickQuote","getTrendingAssets","getSectorPerformance","portfolioService","createPortfolio","post","getPortfolios","getPortfolio","id","updatePortfolio","put","deletePortfolio","delete","addAssetToPortfolio","portfolioId","getPortfolioAssets","updatePortfolioAsset","assetId","removeAssetFromPortfolio","getPortfolioPerformance","getPortfolioSummary","getPortfolioAllocation","suggestRebalance","targetAllocation","newsService","getFinancialNews","category","url","getAssetNews","getNewsCategories","getTrendingNews","searchNews","getNewsSources","getNewsSummary","getHeadlines","calendarService","getEconomicEvents","filters","params","URLSearchParams","Object","entries","forEach","key","value","append","toString","getTodayEvents","country","importance","getWeekEvents","getUpcomingEvents","days","getAvailableCountries","getEventCategories","getImportanceLevels","getCalendarSummary","searchEvents"],"sources":["C:/Users/ferna/INVEST_TRACKER/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport {\r\n  AssetInfo,\r\n  HistoricalData,\r\n  Portfolio,\r\n  PortfolioCreate,\r\n  PortfolioUpdate,\r\n  PortfolioAsset,\r\n  PortfolioAssetCreate,\r\n  PortfolioAssetUpdate,\r\n  NewsItem,\r\n  EconomicEvent,\r\n  ApiResponse,\r\n  MarketOverview,\r\n  AssetSearchResult,\r\n  QuickQuote,\r\n  SectorPerformance,\r\n  PortfolioPerformance,\r\n  PortfolioAllocation,\r\n  RebalanceSuggestion,\r\n  NewsFilter,\r\n  CalendarFilter\r\n} from '../types';\r\n\r\n// Configuração base do Axios\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para tratamento de erros\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    \r\n    if (error.response) {\r\n      // Erro com resposta do servidor\r\n      const message = error.response.data?.detail || error.response.data?.message || 'Erro no servidor';\r\n      throw new Error(message);\r\n    } else if (error.request) {\r\n      // Erro de rede\r\n      throw new Error('Erro de conexão. Verifique sua internet.');\r\n    } else {\r\n      // Outros erros\r\n      throw new Error('Erro inesperado.');\r\n    }\r\n  }\r\n);\r\n\r\n// Serviços de Assets\r\nexport const assetService = {\r\n  // Obter informações de um ativo\r\n  async getAssetInfo(symbol: string): Promise<AssetInfo> {\r\n    const response: AxiosResponse<ApiResponse<AssetInfo>> = await api.get(`/assets/${symbol}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter dados históricos\r\n  async getHistoricalData(\r\n    symbol: string,\r\n    period: string = '1y',\r\n    interval: string = '1d'\r\n  ): Promise<HistoricalData[]> {\r\n    const response: AxiosResponse<ApiResponse<HistoricalData[]>> = await api.get(\r\n      `/assets/${symbol}/historical?period=${period}&interval=${interval}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Buscar ativos\r\n  async searchAssets(query: string, limit: number = 10): Promise<AssetSearchResult[]> {\r\n    const response: AxiosResponse<ApiResponse<AssetSearchResult[]>> = await api.get(\r\n      `/assets/search?q=${encodeURIComponent(query)}&limit=${limit}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter visão geral do mercado\r\n  async getMarketOverview(): Promise<MarketOverview> {\r\n    const response: AxiosResponse<ApiResponse<MarketOverview>> = await api.get('/assets/market-overview');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter múltiplos ativos\r\n  async getMultipleAssets(symbols: string[]): Promise<AssetInfo[]> {\r\n    const symbolsParam = symbols.join(',');\r\n    const response: AxiosResponse<ApiResponse<AssetInfo[]>> = await api.get(\r\n      `/assets/multiple?symbols=${symbolsParam}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter cotação rápida\r\n  async getQuickQuote(symbol: string): Promise<QuickQuote> {\r\n    const response: AxiosResponse<ApiResponse<QuickQuote>> = await api.get(`/assets/${symbol}/quote`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter ativos em alta\r\n  async getTrendingAssets(limit: number = 10): Promise<AssetInfo[]> {\r\n    const response: AxiosResponse<ApiResponse<AssetInfo[]>> = await api.get(\r\n      `/assets/trending?limit=${limit}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter performance por setor\r\n  async getSectorPerformance(): Promise<SectorPerformance[]> {\r\n    const response: AxiosResponse<ApiResponse<SectorPerformance[]>> = await api.get('/assets/sectors');\r\n    return response.data.data;\r\n  },\r\n};\r\n\r\n// Serviços de Portfolio\r\nexport const portfolioService = {\r\n  // Criar portfolio\r\n  async createPortfolio(data: PortfolioCreate): Promise<Portfolio> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio>> = await api.post('/portfolio', data);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter todos os portfolios\r\n  async getPortfolios(): Promise<Portfolio[]> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio[]>> = await api.get('/portfolio');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter portfolio específico\r\n  async getPortfolio(id: number): Promise<Portfolio> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio>> = await api.get(`/portfolio/${id}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Atualizar portfolio\r\n  async updatePortfolio(id: number, data: PortfolioUpdate): Promise<Portfolio> {\r\n    const response: AxiosResponse<ApiResponse<Portfolio>> = await api.put(`/portfolio/${id}`, data);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Deletar portfolio\r\n  async deletePortfolio(id: number): Promise<void> {\r\n    await api.delete(`/portfolio/${id}`);\r\n  },\r\n\r\n  // Adicionar ativo ao portfolio\r\n  async addAssetToPortfolio(portfolioId: number, data: PortfolioAssetCreate): Promise<PortfolioAsset> {\r\n    const response: AxiosResponse<ApiResponse<PortfolioAsset>> = await api.post(\r\n      `/portfolio/${portfolioId}/assets`,\r\n      data\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter ativos do portfolio\r\n  async getPortfolioAssets(portfolioId: number): Promise<PortfolioAsset[]> {\r\n    const response: AxiosResponse<ApiResponse<PortfolioAsset[]>> = await api.get(\r\n      `/portfolio/${portfolioId}/assets`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Atualizar ativo do portfolio\r\n  async updatePortfolioAsset(assetId: number, data: PortfolioAssetUpdate): Promise<PortfolioAsset> {\r\n    const response: AxiosResponse<ApiResponse<PortfolioAsset>> = await api.put(\r\n      `/portfolio/assets/${assetId}`,\r\n      data\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Remover ativo do portfolio\r\n  async removeAssetFromPortfolio(assetId: number): Promise<void> {\r\n    await api.delete(`/portfolio/assets/${assetId}`);\r\n  },\r\n\r\n  // Obter performance do portfolio\r\n  async getPortfolioPerformance(portfolioId: number): Promise<PortfolioPerformance> {\r\n    const response: AxiosResponse<ApiResponse<PortfolioPerformance>> = await api.get(\r\n      `/portfolio/${portfolioId}/performance`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter resumo do portfolio\r\n  async getPortfolioSummary(portfolioId: number): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get(`/portfolio/${portfolioId}/summary`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter alocação do portfolio\r\n  async getPortfolioAllocation(portfolioId: number): Promise<PortfolioAllocation[]> {\r\n    const response: AxiosResponse<ApiResponse<PortfolioAllocation[]>> = await api.get(\r\n      `/portfolio/${portfolioId}/allocation`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Sugerir rebalanceamento\r\n  async suggestRebalance(\r\n    portfolioId: number,\r\n    targetAllocation: Record<string, number>\r\n  ): Promise<RebalanceSuggestion[]> {\r\n    const response: AxiosResponse<ApiResponse<RebalanceSuggestion[]>> = await api.post(\r\n      `/portfolio/${portfolioId}/rebalance`,\r\n      targetAllocation\r\n    );\r\n    return response.data.data;\r\n  },\r\n};\r\n\r\n// Serviços de Notícias\r\nexport const newsService = {\r\n  // Obter notícias financeiras\r\n  async getFinancialNews(limit: number = 20, category?: string): Promise<NewsItem[]> {\r\n    let url = `/news?limit=${limit}`;\r\n    if (category) {\r\n      url += `&category=${category}`;\r\n    }\r\n    const response: AxiosResponse<ApiResponse<NewsItem[]>> = await api.get(url);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter notícias de um ativo específico\r\n  async getAssetNews(symbol: string, limit: number = 10): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<NewsItem[]>> = await api.get(\r\n      `/news/asset/${symbol}?limit=${limit}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter categorias de notícias\r\n  async getNewsCategories(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/news/categories');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter notícias em alta\r\n  async getTrendingNews(limit: number = 10): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<NewsItem[]>> = await api.get(`/news/trending?limit=${limit}`);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Buscar notícias\r\n  async searchNews(query: string, limit: number = 15): Promise<NewsItem[]> {\r\n    const response: AxiosResponse<ApiResponse<NewsItem[]>> = await api.get(\r\n      `/news/search?query=${encodeURIComponent(query)}&limit=${limit}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter fontes de notícias\r\n  async getNewsSources(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/news/sources');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter resumo de notícias\r\n  async getNewsSummary(): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get('/news/summary');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter manchetes\r\n  async getHeadlines(limit: number = 5): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get(`/news/headlines?limit=${limit}`);\r\n    return response.data.data;\r\n  },\r\n};\r\n\r\n// Serviços de Calendário Econômico\r\nexport const calendarService = {\r\n  // Obter eventos econômicos\r\n  async getEconomicEvents(filters: CalendarFilter = {}): Promise<EconomicEvent[]> {\r\n    const params = new URLSearchParams();\r\n    \r\n    Object.entries(filters).forEach(([key, value]) => {\r\n      if (value) {\r\n        params.append(key, value.toString());\r\n      }\r\n    });\r\n\r\n    const response: AxiosResponse<ApiResponse<EconomicEvent[]>> = await api.get(\r\n      `/calendar/events?${params.toString()}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter eventos de hoje\r\n  async getTodayEvents(country?: string, importance?: string): Promise<EconomicEvent[]> {\r\n    let url = '/calendar/today';\r\n    const params = new URLSearchParams();\r\n    \r\n    if (country) params.append('country', country);\r\n    if (importance) params.append('importance', importance);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n\r\n    const response: AxiosResponse<ApiResponse<EconomicEvent[]>> = await api.get(url);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter eventos da semana\r\n  async getWeekEvents(country?: string, importance?: string): Promise<EconomicEvent[]> {\r\n    let url = '/calendar/week';\r\n    const params = new URLSearchParams();\r\n    \r\n    if (country) params.append('country', country);\r\n    if (importance) params.append('importance', importance);\r\n    \r\n    if (params.toString()) {\r\n      url += `?${params.toString()}`;\r\n    }\r\n\r\n    const response: AxiosResponse<ApiResponse<EconomicEvent[]>> = await api.get(url);\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter próximos eventos\r\n  async getUpcomingEvents(\r\n    days: number = 7,\r\n    country?: string,\r\n    importance?: string,\r\n    limit: number = 20\r\n  ): Promise<EconomicEvent[]> {\r\n    const params = new URLSearchParams({\r\n      days: days.toString(),\r\n      limit: limit.toString(),\r\n    });\r\n    \r\n    if (country) params.append('country', country);\r\n    if (importance) params.append('importance', importance);\r\n\r\n    const response: AxiosResponse<ApiResponse<EconomicEvent[]>> = await api.get(\r\n      `/calendar/upcoming?${params.toString()}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter países disponíveis\r\n  async getAvailableCountries(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/calendar/countries');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter categorias de eventos\r\n  async getEventCategories(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/calendar/categories');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter níveis de importância\r\n  async getImportanceLevels(): Promise<any[]> {\r\n    const response: AxiosResponse<ApiResponse<any[]>> = await api.get('/calendar/importance-levels');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Obter resumo do calendário\r\n  async getCalendarSummary(): Promise<any> {\r\n    const response: AxiosResponse<ApiResponse<any>> = await api.get('/calendar/summary');\r\n    return response.data.data;\r\n  },\r\n\r\n  // Buscar eventos\r\n  async searchEvents(query: string, limit: number = 20): Promise<EconomicEvent[]> {\r\n    const response: AxiosResponse<ApiResponse<EconomicEvent[]>> = await api.get(\r\n      `/calendar/search?query=${encodeURIComponent(query)}&limit=${limit}`\r\n    );\r\n    return response.data.data;\r\n  },\r\n};\r\n\r\n// Exportar instância do axios para uso direto se necessário\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAyB,OAAO;AAwB5C;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;EACrEC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACTC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAElC,IAAIA,KAAK,CAACF,QAAQ,EAAE;IAAA,IAAAI,oBAAA,EAAAC,qBAAA;IAClB;IACA,MAAMC,OAAO,GAAG,EAAAF,oBAAA,GAAAF,KAAK,CAACF,QAAQ,CAACO,IAAI,cAAAH,oBAAA,uBAAnBA,oBAAA,CAAqBI,MAAM,OAAAH,qBAAA,GAAIH,KAAK,CAACF,QAAQ,CAACO,IAAI,cAAAF,qBAAA,uBAAnBA,qBAAA,CAAqBC,OAAO,KAAI,kBAAkB;IACjG,MAAM,IAAIG,KAAK,CAACH,OAAO,CAAC;EAC1B,CAAC,MAAM,IAAIJ,KAAK,CAACQ,OAAO,EAAE;IACxB;IACA,MAAM,IAAID,KAAK,CAAC,0CAA0C,CAAC;EAC7D,CAAC,MAAM;IACL;IACA,MAAM,IAAIA,KAAK,CAAC,kBAAkB,CAAC;EACrC;AACF,CACF,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAG;EAC1B;EACA,MAAMC,YAAYA,CAACC,MAAc,EAAsB;IACrD,MAAMb,QAA+C,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,WAAWD,MAAM,EAAE,CAAC;IAC1F,OAAOb,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMQ,iBAAiBA,CACrBF,MAAc,EACdG,MAAc,GAAG,IAAI,EACrBC,QAAgB,GAAG,IAAI,EACI;IAC3B,MAAMjB,QAAsD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAC1E,WAAWD,MAAM,sBAAsBG,MAAM,aAAaC,QAAQ,EACpE,CAAC;IACD,OAAOjB,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMW,YAAYA,CAACC,KAAa,EAAEC,KAAa,GAAG,EAAE,EAAgC;IAClF,MAAMpB,QAAyD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAC7E,oBAAoBO,kBAAkB,CAACF,KAAK,CAAC,UAAUC,KAAK,EAC9D,CAAC;IACD,OAAOpB,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMe,iBAAiBA,CAAA,EAA4B;IACjD,MAAMtB,QAAoD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,yBAAyB,CAAC;IACrG,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMgB,iBAAiBA,CAACC,OAAiB,EAAwB;IAC/D,MAAMC,YAAY,GAAGD,OAAO,CAACE,IAAI,CAAC,GAAG,CAAC;IACtC,MAAM1B,QAAiD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CACrE,4BAA4BW,YAAY,EAC1C,CAAC;IACD,OAAOzB,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMoB,aAAaA,CAACd,MAAc,EAAuB;IACvD,MAAMb,QAAgD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,WAAWD,MAAM,QAAQ,CAAC;IACjG,OAAOb,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMqB,iBAAiBA,CAACR,KAAa,GAAG,EAAE,EAAwB;IAChE,MAAMpB,QAAiD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CACrE,0BAA0BM,KAAK,EACjC,CAAC;IACD,OAAOpB,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMsB,oBAAoBA,CAAA,EAAiC;IACzD,MAAM7B,QAAyD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,iBAAiB,CAAC;IAClG,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC;;AAED;AACA,OAAO,MAAMuB,gBAAgB,GAAG;EAC9B;EACA,MAAMC,eAAeA,CAACxB,IAAqB,EAAsB;IAC/D,MAAMP,QAA+C,GAAG,MAAMT,GAAG,CAACyC,IAAI,CAAC,YAAY,EAAEzB,IAAI,CAAC;IAC1F,OAAOP,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAM0B,aAAaA,CAAA,EAAyB;IAC1C,MAAMjC,QAAiD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,YAAY,CAAC;IACrF,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAM2B,YAAYA,CAACC,EAAU,EAAsB;IACjD,MAAMnC,QAA+C,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,cAAcqB,EAAE,EAAE,CAAC;IACzF,OAAOnC,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAM6B,eAAeA,CAACD,EAAU,EAAE5B,IAAqB,EAAsB;IAC3E,MAAMP,QAA+C,GAAG,MAAMT,GAAG,CAAC8C,GAAG,CAAC,cAAcF,EAAE,EAAE,EAAE5B,IAAI,CAAC;IAC/F,OAAOP,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAM+B,eAAeA,CAACH,EAAU,EAAiB;IAC/C,MAAM5C,GAAG,CAACgD,MAAM,CAAC,cAAcJ,EAAE,EAAE,CAAC;EACtC,CAAC;EAED;EACA,MAAMK,mBAAmBA,CAACC,WAAmB,EAAElC,IAA0B,EAA2B;IAClG,MAAMP,QAAoD,GAAG,MAAMT,GAAG,CAACyC,IAAI,CACzE,cAAcS,WAAW,SAAS,EAClClC,IACF,CAAC;IACD,OAAOP,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMmC,kBAAkBA,CAACD,WAAmB,EAA6B;IACvE,MAAMzC,QAAsD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAC1E,cAAc2B,WAAW,SAC3B,CAAC;IACD,OAAOzC,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMoC,oBAAoBA,CAACC,OAAe,EAAErC,IAA0B,EAA2B;IAC/F,MAAMP,QAAoD,GAAG,MAAMT,GAAG,CAAC8C,GAAG,CACxE,qBAAqBO,OAAO,EAAE,EAC9BrC,IACF,CAAC;IACD,OAAOP,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMsC,wBAAwBA,CAACD,OAAe,EAAiB;IAC7D,MAAMrD,GAAG,CAACgD,MAAM,CAAC,qBAAqBK,OAAO,EAAE,CAAC;EAClD,CAAC;EAED;EACA,MAAME,uBAAuBA,CAACL,WAAmB,EAAiC;IAChF,MAAMzC,QAA0D,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAC9E,cAAc2B,WAAW,cAC3B,CAAC;IACD,OAAOzC,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMwC,mBAAmBA,CAACN,WAAmB,EAAgB;IAC3D,MAAMzC,QAAyC,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,cAAc2B,WAAW,UAAU,CAAC;IACpG,OAAOzC,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMyC,sBAAsBA,CAACP,WAAmB,EAAkC;IAChF,MAAMzC,QAA2D,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAC/E,cAAc2B,WAAW,aAC3B,CAAC;IACD,OAAOzC,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAM0C,gBAAgBA,CACpBR,WAAmB,EACnBS,gBAAwC,EACR;IAChC,MAAMlD,QAA2D,GAAG,MAAMT,GAAG,CAACyC,IAAI,CAChF,cAAcS,WAAW,YAAY,EACrCS,gBACF,CAAC;IACD,OAAOlD,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC;;AAED;AACA,OAAO,MAAM4C,WAAW,GAAG;EACzB;EACA,MAAMC,gBAAgBA,CAAChC,KAAa,GAAG,EAAE,EAAEiC,QAAiB,EAAuB;IACjF,IAAIC,GAAG,GAAG,eAAelC,KAAK,EAAE;IAChC,IAAIiC,QAAQ,EAAE;MACZC,GAAG,IAAI,aAAaD,QAAQ,EAAE;IAChC;IACA,MAAMrD,QAAgD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAACwC,GAAG,CAAC;IAC3E,OAAOtD,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMgD,YAAYA,CAAC1C,MAAc,EAAEO,KAAa,GAAG,EAAE,EAAuB;IAC1E,MAAMpB,QAAgD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CACpE,eAAeD,MAAM,UAAUO,KAAK,EACtC,CAAC;IACD,OAAOpB,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMiD,iBAAiBA,CAAA,EAAmB;IACxC,MAAMxD,QAA2C,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,kBAAkB,CAAC;IACrF,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMkD,eAAeA,CAACrC,KAAa,GAAG,EAAE,EAAuB;IAC7D,MAAMpB,QAAgD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,wBAAwBM,KAAK,EAAE,CAAC;IACvG,OAAOpB,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMmD,UAAUA,CAACvC,KAAa,EAAEC,KAAa,GAAG,EAAE,EAAuB;IACvE,MAAMpB,QAAgD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CACpE,sBAAsBO,kBAAkB,CAACF,KAAK,CAAC,UAAUC,KAAK,EAChE,CAAC;IACD,OAAOpB,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMoD,cAAcA,CAAA,EAAmB;IACrC,MAAM3D,QAA2C,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,eAAe,CAAC;IAClF,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMqD,cAAcA,CAAA,EAAiB;IACnC,MAAM5D,QAAyC,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,eAAe,CAAC;IAChF,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMsD,YAAYA,CAACzC,KAAa,GAAG,CAAC,EAAkB;IACpD,MAAMpB,QAA2C,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,yBAAyBM,KAAK,EAAE,CAAC;IACnG,OAAOpB,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC;;AAED;AACA,OAAO,MAAMuD,eAAe,GAAG;EAC7B;EACA,MAAMC,iBAAiBA,CAACC,OAAuB,GAAG,CAAC,CAAC,EAA4B;IAC9E,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IAEpCC,MAAM,CAACC,OAAO,CAACJ,OAAO,CAAC,CAACK,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;MAChD,IAAIA,KAAK,EAAE;QACTN,MAAM,CAACO,MAAM,CAACF,GAAG,EAAEC,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC;MACtC;IACF,CAAC,CAAC;IAEF,MAAMzE,QAAqD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CACzE,oBAAoBmD,MAAM,CAACQ,QAAQ,CAAC,CAAC,EACvC,CAAC;IACD,OAAOzE,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMmE,cAAcA,CAACC,OAAgB,EAAEC,UAAmB,EAA4B;IACpF,IAAItB,GAAG,GAAG,iBAAiB;IAC3B,MAAMW,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IAEpC,IAAIS,OAAO,EAAEV,MAAM,CAACO,MAAM,CAAC,SAAS,EAAEG,OAAO,CAAC;IAC9C,IAAIC,UAAU,EAAEX,MAAM,CAACO,MAAM,CAAC,YAAY,EAAEI,UAAU,CAAC;IAEvD,IAAIX,MAAM,CAACQ,QAAQ,CAAC,CAAC,EAAE;MACrBnB,GAAG,IAAI,IAAIW,MAAM,CAACQ,QAAQ,CAAC,CAAC,EAAE;IAChC;IAEA,MAAMzE,QAAqD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAACwC,GAAG,CAAC;IAChF,OAAOtD,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMsE,aAAaA,CAACF,OAAgB,EAAEC,UAAmB,EAA4B;IACnF,IAAItB,GAAG,GAAG,gBAAgB;IAC1B,MAAMW,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;IAEpC,IAAIS,OAAO,EAAEV,MAAM,CAACO,MAAM,CAAC,SAAS,EAAEG,OAAO,CAAC;IAC9C,IAAIC,UAAU,EAAEX,MAAM,CAACO,MAAM,CAAC,YAAY,EAAEI,UAAU,CAAC;IAEvD,IAAIX,MAAM,CAACQ,QAAQ,CAAC,CAAC,EAAE;MACrBnB,GAAG,IAAI,IAAIW,MAAM,CAACQ,QAAQ,CAAC,CAAC,EAAE;IAChC;IAEA,MAAMzE,QAAqD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAACwC,GAAG,CAAC;IAChF,OAAOtD,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMuE,iBAAiBA,CACrBC,IAAY,GAAG,CAAC,EAChBJ,OAAgB,EAChBC,UAAmB,EACnBxD,KAAa,GAAG,EAAE,EACQ;IAC1B,MAAM6C,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCa,IAAI,EAAEA,IAAI,CAACN,QAAQ,CAAC,CAAC;MACrBrD,KAAK,EAAEA,KAAK,CAACqD,QAAQ,CAAC;IACxB,CAAC,CAAC;IAEF,IAAIE,OAAO,EAAEV,MAAM,CAACO,MAAM,CAAC,SAAS,EAAEG,OAAO,CAAC;IAC9C,IAAIC,UAAU,EAAEX,MAAM,CAACO,MAAM,CAAC,YAAY,EAAEI,UAAU,CAAC;IAEvD,MAAM5E,QAAqD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CACzE,sBAAsBmD,MAAM,CAACQ,QAAQ,CAAC,CAAC,EACzC,CAAC;IACD,OAAOzE,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAMyE,qBAAqBA,CAAA,EAAmB;IAC5C,MAAMhF,QAA2C,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,qBAAqB,CAAC;IACxF,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAM0E,kBAAkBA,CAAA,EAAmB;IACzC,MAAMjF,QAA2C,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,sBAAsB,CAAC;IACzF,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAM2E,mBAAmBA,CAAA,EAAmB;IAC1C,MAAMlF,QAA2C,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,6BAA6B,CAAC;IAChG,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAM4E,kBAAkBA,CAAA,EAAiB;IACvC,MAAMnF,QAAyC,GAAG,MAAMT,GAAG,CAACuB,GAAG,CAAC,mBAAmB,CAAC;IACpF,OAAOd,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B,CAAC;EAED;EACA,MAAM6E,YAAYA,CAACjE,KAAa,EAAEC,KAAa,GAAG,EAAE,EAA4B;IAC9E,MAAMpB,QAAqD,GAAG,MAAMT,GAAG,CAACuB,GAAG,CACzE,0BAA0BO,kBAAkB,CAACF,KAAK,CAAC,UAAUC,KAAK,EACpE,CAAC;IACD,OAAOpB,QAAQ,CAACO,IAAI,CAACA,IAAI;EAC3B;AACF,CAAC;;AAED;AACA,eAAehB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}